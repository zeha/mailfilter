/* Metrowerks Standard Library
 * Copyright © 1995-2002 Metrowerks Corporation.  All rights reserved.
 *
 * $Date: 2002/07/01 21:13:38 $ 
 * $Revision: 1.3 $ 
 */

// utility

#ifndef  _UTILITY
#define  _UTILITY

/*  utility synopsis

namespace std
{
namespace rel_ops
{
	template<class T> bool operator!=(const T&, const T&);
	template<class T> bool operator> (const T&, const T&);
	template<class T> bool operator<=(const T&, const T&);
	template<class T> bool operator>=(const T&, const T&);
}  // rel_ops

	//  pair:

template <class T1, class T2>
struct pair
{
	typedef T1 first_type;
	typedef T2 second_type;

	T1 first;
	T2 second;
	pair();
	pair(const T1& x, const T2& y);
	template<class U, class V> pair(const pair<U, V>& p);
};

template <class T1, class T2> bool operator==(const pair<T1,T2>&, const pair<T1,T2>&);
template <class T1, class T2> bool operator< (const pair<T1,T2>&, const pair<T1,T2>&);
template <class T1, class T2> bool operator!=(const pair<T1,T2>&, const pair<T1,T2>&);
template <class T1, class T2> bool operator> (const pair<T1,T2>&, const pair<T1,T2>&);
template <class T1, class T2> bool operator>=(const pair<T1,T2>&, const pair<T1,T2>&);
template <class T1, class T2> bool operator<=(const pair<T1,T2>&, const pair<T1,T2>&);

template <class T1, class T2> pair<T1,T2> make_pair(const T1&, const T2&);

}  // std
*/

#include <mslconfig>

#ifndef RC_INVOKED

#pragma options align=native

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
	#if _MSL_FORCE_ENUMS_ALWAYS_INT
		#pragma enumsalwaysint on
	#else
		#pragma enumsalwaysint off
	#endif
#endif

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
	#if _MSL_FORCE_ENABLE_BOOL_SUPPORT
		#pragma bool on
	#else
		#pragma bool off
	#endif
#endif

#ifndef _MSL_NO_CPP_NAMESPACE
	namespace std {
#endif

//  lib.operators, operators:
#ifndef _MSL_NO_CPP_NAMESPACE
	namespace rel_ops {
#endif

	template<class T>
	inline
	bool
	operator!=(const T& x, const T& y)
	{
		return static_cast<bool>(!(x == y));
	}

	template<class T>
	inline
	bool operator> (const T& x, const T& y)
	{
		return static_cast<bool>(y < x);
	}

	template<class T>
	inline
	bool
	operator<=(const T& x, const T& y)
	{
		return static_cast<bool>(!(y < x));
	}

	template<class T>
	inline
	bool
	operator>=(const T& x, const T& y)
	{
		return static_cast<bool>(!(x < y));
	}

#ifndef _MSL_NO_CPP_NAMESPACE
	}  // std::rel_ops
#endif

//  lib.pairs, pairs:
template <class T1, class T2>
struct pair
{
	typedef T1 first_type;
	typedef T2 second_type;

	T1 first;
	T2 second;
	pair();
	pair(const T1& x, const T2& y);
#ifndef _MSL_NO_MEMBER_TEMPLATE
#ifndef _MSL_MUST_INLINE_MEMBER_TEMPLATE
	template<class U, class V> pair(const pair<U, V>& p);
#else
	template<class U, class V>
	inline
	pair(const pair<U, V>& p)
		: first(p.first),
		  second(p.second)
	{
	}
#endif
#endif
};

template <class T1, class T2>
inline
pair<T1, T2>::pair()
	: first(),
	  second()
{
}

template <class T1, class T2>
inline
pair<T1, T2>::pair(const T1& x, const T2& y)
	: first(x),
	  second(y)
{
}

#ifndef _MSL_NO_MEMBER_TEMPLATE
#ifndef _MSL_MUST_INLINE_MEMBER_TEMPLATE

	template <class T1, class T2>
	template<class U, class V>
	inline
	pair<T1, T2>::pair(const pair<U, V>& p)
		: first(p.first),
		  second(p.second)
	{
	}

#endif
#endif

template <class T1, class T2>
inline
bool
operator==(const pair<T1,T2>& x, const pair<T1,T2>& y)
{
	return static_cast<bool>(x.first == y.first && x.second == y.second);
}

template <class T1, class T2>
inline
bool
operator< (const pair<T1,T2>& x, const pair<T1,T2>& y)
{
	return static_cast<bool>(x.first < y.first ||
	                      (!(y.first < x.first) && x.second < y.second));
}

template <class T1, class T2>
inline
bool
operator!=(const pair<T1,T2>& x, const pair<T1,T2>& y)
{
	return static_cast<bool>(!(x == y));
}

template <class T1, class T2>
inline
bool
operator> (const pair<T1,T2>& x, const pair<T1,T2>& y)
{
	return y < x;
}

template <class T1, class T2>
inline
bool
operator>=(const pair<T1,T2>& x, const pair<T1,T2>& y)
{
	return static_cast<bool>(!(x < y));
}

template <class T1, class T2>
inline
bool
operator<=(const pair<T1,T2>& x, const pair<T1,T2>& y)
{
	return static_cast<bool>(!(y < x));
}

// make_pair is in flux right now.  The standard version does not work with
// built-in c-strings.  There are two possible solutions in front of the C++
// committee.  The std, but broken version is commented out, and the most
// likely solution is commented in.
// hh 000419

//template <class T1, class T2>
//inline
//pair<T1, T2>
//make_pair(const T1& x, const T2& y)
//{
//	return pair<T1, T2>(x, y);
//}

template <class T1, class T2>
inline
pair<T1, T2>
make_pair(T1 x, T2 y)
{
	return pair<T1, T2>(x, y);
}

#ifndef _MSL_NO_CPP_NAMESPACE
	} // namespace std
#endif

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
	#pragma enumsalwaysint reset
#endif

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
	#pragma bool reset
#endif

#pragma options align=reset

#endif // RC_INVOKED

#endif // _UTILITY

// hh 971220 fixed MOD_INCLUDE
// hh 971226 Changed filename from utility.h to utility
// hh 971226 Made include guards standard
// hh 971226 added alignment wrapper
// hh 971230 added RC_INVOKED wrapper
// hh 980130 commented out <iosfwd>
// hh 990426 Rewrote.
// hh 000130 Patched make_pair to work better with string literals
// hh 010402 Removed 68K CMF support
// hh 010508 Reworked default pair constructor per issue 265
