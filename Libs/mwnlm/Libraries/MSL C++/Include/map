/* Metrowerks Standard Library
 * Copyright © 1995-2002 Metrowerks Corporation.  All rights reserved.
 *
 * $Date: 2002/07/01 21:13:35 $ 
 * $Revision: 1.3 $ 
 */

// map

#ifndef _MAP
#define _MAP

/*  map synopsis

namespace std
{

template <class Key, class T, class Compare = less<Key>,
          class Allocator = allocator<pair<const Key, T> > >
class map
{
public:
	//  types:
	typedef Key                                   key_type;
	typedef T                                     mapped_type;
	typedef pair<const Key, T>                    value_type;
	typedef Compare                               key_compare;
	typedef Allocator                             allocator_type;
	typedef typename Allocator::reference         reference;
	typedef typename Allocator::const_reference   const_reference;
	typedef typename Allocator::size_type         size_type;
	typedef typename Allocator::difference_type   difference_type;
	typedef typename Allocator::pointer           pointer;
	typedef typename Allocator::const_pointer     const_pointer;

	class                                         iterator;        // bidirectional
	class                                         const_iterator;  // bidirectional
	typedef std::reverse_iterator<iterator>       reverse_iterator;
	typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

	class value_compare
		: public binary_function<value_type, value_type, bool>
	{
		friend class map;
	protected:
		Compare comp;
		value_compare(Compare c);
	public:
		bool operator()(const value_type& x, const value_type& y) const;
	};

	explicit map(const Compare& comp = Compare(), const Allocator& = Allocator());
	template <class InputIterator>
		map(InputIterator first, InputIterator last,
		    const Compare& comp = Compare(), const Allocator& = Allocator());
	map(const map& x);
	map& operator=(const map& x);
	~map();

	allocator_type get_allocator() const;
	size_type max_size() const;

	size_type size() const;
	bool      empty() const;

	iterator               begin();
	const_iterator         begin() const;
	iterator               end();
	const_iterator         end() const;

	reverse_iterator       rbegin();
	const_reverse_iterator rbegin() const;
	reverse_iterator       rend();
	const_reverse_iterator rend() const;

	T& operator[](const key_type& x);

	pair<iterator, bool> insert(const value_type& x);
	iterator             insert(iterator position, const value_type& x);
	template <class InputIterator>
		void             insert(InputIterator first, InputIterator last);

	void      erase(iterator position);
	size_type erase(const key_type& x);
	void      erase(iterator first, iterator last);
	void clear();

	void swap(map&);

	key_compare   key_comp() const;
	value_compare value_comp() const;

	iterator       find(const key_type& x);
	const_iterator find(const key_type& x) const;
	size_type      count(const key_type& x) const;

	iterator       lower_bound(const key_type& x);
	const_iterator lower_bound(const key_type& x) const;
	iterator       upper_bound(const key_type& x);
	const_iterator upper_bound(const key_type& x) const;

	pair<iterator,iterator>	            equal_range(const key_type& x);
	pair<const_iterator,const_iterator>	equal_range(const key_type& x) const;

	bool invariants() const;   // Metrowerks extension
};

template <class Key, class T, class Compare, class Allocator>
bool
operator==(const map<Key,T,Compare,Allocator>& x, const map<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator< (const map<Key,T,Compare,Allocator>& x, const map<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator!=(const map<Key,T,Compare,Allocator>& x, const map<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator> (const map<Key,T,Compare,Allocator>& x, const map<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator>=(const map<Key,T,Compare,Allocator>& x, const map<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator<=(const map<Key,T,Compare,Allocator>& x, const map<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
void
swap(map<Key,T,Compare,Allocator>& x, map<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare = less<Key>,
          class Allocator = allocator<pair<const Key, T> > >
class multimap
public:
	//  types:
	typedef Key                                   key_type;
	typedef T                                     mapped_type;
	typedef pair<const Key,T>                     value_type;
	typedef Compare                               key_compare;
	typedef Allocator                             allocator_type;
	typedef typename Allocator::reference         reference;
	typedef typename Allocator::const_reference   const_reference;
	typedef typename Allocator::size_type         size_type;
	typedef typename Allocator::difference_type   difference_type;
	typedef typename Allocator::pointer           pointer;
	typedef typename Allocator::const_pointer     const_pointer;

	class                                         iterator;        // bidirectional
	class                                         const_iterator;  // bidirectional
	typedef std::reverse_iterator<iterator>       reverse_iterator;
	typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

	class value_compare
		: public binary_function<value_type,value_type,bool>
	{
		friend class multimap;
	protected:
		Compare comp;
		value_compare(Compare c);
	public:
		bool operator()(const value_type& x, const value_type& y) const;
	};

    explicit multimap(const Compare& comp = Compare(), const Allocator& = Allocator());
	template <class InputIterator>
		multimap(InputIterator first, InputIterator last,
		         const Compare& comp = Compare(), const Allocator& = Allocator());
	multimap(const multimap& x);
	multimap& operator=(const multimap& x);
	~multimap();

	allocator_type get_allocator() const;
	size_type      max_size() const;

	size_type size() const;
	bool      empty() const;

	iterator               begin();
	const_iterator         begin() const;
	iterator               end();
	const_iterator         end() const;

	reverse_iterator       rbegin();
	const_reverse_iterator rbegin() const;
	reverse_iterator       rend();
	const_reverse_iterator rend() const;

	iterator insert(const value_type& x);
	iterator insert(iterator position, const value_type& x);
	template <class InputIterator>
		void insert(InputIterator first, InputIterator last);

	void      erase(iterator position);
	size_type erase(const key_type& x);
	void      erase(iterator first, iterator last);
	void clear();

	void swap(multimap&);

	key_compare    key_comp() const;
	value_compare  value_comp() const;

	iterator       find(const key_type& x);
	const_iterator find(const key_type& x) const;
	size_type      count(const key_type& x) const;

	iterator       lower_bound(const key_type& x);
	const_iterator lower_bound(const key_type& x) const;
	iterator       upper_bound(const key_type& x);
	const_iterator upper_bound(const key_type& x) const;

	pair<iterator,iterator>             equal_range(const key_type& x);
	pair<const_iterator,const_iterator> equal_range(const key_type& x) const;

	bool invariants() const;   // Metrowerks extension
};

template <class Key, class T, class Compare, class Allocator>
bool
operator==(const multimap<Key,T,Compare,Allocator>& x, const multimap<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator< (const multimap<Key,T,Compare,Allocator>& x, const multimap<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator!=(const multimap<Key,T,Compare,Allocator>& x, const multimap<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator> (const multimap<Key,T,Compare,Allocator>& x, const multimap<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator>=(const multimap<Key,T,Compare,Allocator>& x, const multimap<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator<=(const multimap<Key,T,Compare,Allocator>& x, const multimap<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
void
swap(multimap<Key,T,Compare,Allocator>& x, multimap<Key,T,Compare,Allocator>& y);

}  // std
*/

#include <mslconfig>
#include <tree>
#include <functional>

#ifndef RC_INVOKED

#pragma options align=native

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
	#if _MSL_FORCE_ENUMS_ALWAYS_INT
		#pragma enumsalwaysint on
	#else
		#pragma enumsalwaysint off
	#endif
#endif

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
	#if _MSL_FORCE_ENABLE_BOOL_SUPPORT
		#pragma bool on
	#else
		#pragma bool off
	#endif
#endif

#ifndef _MSL_NO_CPP_NAMESPACE
	namespace std {
#endif

// map

template <class Key, class T, class Compare = less<Key>,
          class Allocator = allocator<pair<const Key, T> > >
class map
{
public:
//  types:
	typedef Key                                   key_type;
	typedef T                                     mapped_type;
	typedef pair<const Key, T>                    value_type;
	typedef Compare                               key_compare;
	typedef Allocator                             allocator_type;
	typedef typename Allocator::reference         reference;
	typedef typename Allocator::const_reference   const_reference;
	typedef typename Allocator::size_type         size_type;
	typedef typename Allocator::difference_type   difference_type;
	typedef typename Allocator::pointer           pointer;
	typedef typename Allocator::const_pointer     const_pointer;

	struct debug_view
	{
		debug_view* left_;
		debug_view* right_;
		debug_view* parent_;
		value_type data_;
	};

	class value_compare
		: public binary_function<value_type, value_type, bool>
	{
	public:
		bool operator()(const value_type& x, const value_type& y) const
		{
			return comp(x.first, y.first);
		}
		bool operator()(const key_type& x, const value_type& y) const
		{
			return comp(x, y.first);
		}
		bool operator()(const value_type& x, const key_type& y) const
		{
			return comp(x.first, y);
		}
	protected:
		Compare comp;

		value_compare() {}
		value_compare(Compare c) : comp(c) {}

		friend class map;
	};

private:
	typedef __tree<value_type, value_compare, allocator_type> tree_type;
public:
	typedef typename tree_type::iterator       iterator;
	typedef typename tree_type::const_iterator const_iterator;
	typedef _STD::reverse_iterator<iterator>       reverse_iterator;
	typedef _STD::reverse_iterator<const_iterator> const_reverse_iterator;

	//  lib.map.cons construct/copy/destroy:
	         map();
	explicit map(const Compare& comp);
	         map(const Compare& comp, const Allocator& a);
	#ifndef _MSL_NO_MEMBER_TEMPLATE
		template <class InputIterator>
			inline
			map(InputIterator first, InputIterator last)
				: tree_(first, last, false, value_compare(), allocator_type())
			{
			}
		template <class InputIterator>
			inline
			map(InputIterator first, InputIterator last, const Compare& comp)
				: tree_(first, last, false, value_compare(comp), allocator_type())
			{
			}
		template <class InputIterator>
			inline
			map(InputIterator first, InputIterator last, const Compare& comp,
				const Allocator& a)
				: tree_(first, last, false, value_compare(comp), a)
			{
			}
	#else
		map(const_iterator first, const_iterator last, const Compare& comp = Compare(),
				const Allocator& a = Allocator());
		map(const value_type* first, const value_type* last, const Compare& comp = Compare(),
				const Allocator& a = Allocator());
	#endif

	allocator_type get_allocator() const;

	//  iterators:
	iterator               begin();
	const_iterator         begin() const;
	iterator               end();
	const_iterator         end() const;
	reverse_iterator       rbegin();
	const_reverse_iterator rbegin() const;
	reverse_iterator       rend();
	const_reverse_iterator rend() const;

	//  capacity:
	bool      empty() const;
	size_type size() const;
	size_type max_size() const;

	//  lib.map.access element access:
	T& operator[](const key_type& x);

	//  modifiers:
	pair<iterator, bool> insert(const value_type& x);
	iterator             insert(iterator position, const value_type& x);
	#ifndef _MSL_NO_MEMBER_TEMPLATE
		template <class InputIterator>
			inline
			void insert(InputIterator first, InputIterator last)
			{
				tree_.insert_one(first, last);
			}
	#else
		void insert(const_iterator first, const_iterator last);
		void insert(const value_type* first, const value_type* last);
	#endif

	void      erase(iterator position);
	size_type erase(const key_type& x);
	void      erase(iterator first, iterator last);
	void swap(map<Key,T,Compare,Allocator>& x);
	void clear();

	//  observers:
	key_compare   key_comp() const;
	value_compare value_comp() const;

	//  lib.map.ops map operations:
	iterator       find(const key_type& x);
	const_iterator find(const key_type& x) const;
	size_type      count(const key_type& x) const;

	iterator       lower_bound(const key_type& x);
	const_iterator lower_bound(const key_type& x) const;
	iterator       upper_bound(const key_type& x);
	const_iterator upper_bound(const key_type& x) const;

	pair<iterator,iterator> equal_range(const key_type& x);
	pair<const_iterator,const_iterator> equal_range(const key_type& x) const;

	bool invariants() const;
private:
	tree_type tree_;
};

template <class Key, class T, class Compare, class Allocator>
bool
operator==(const map<Key,T,Compare,Allocator>& x, const map<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator< (const map<Key,T,Compare,Allocator>& x, const map<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator!=(const map<Key,T,Compare,Allocator>& x, const map<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator> (const map<Key,T,Compare,Allocator>& x, const map<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator>=(const map<Key,T,Compare,Allocator>& x, const map<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator<=(const map<Key,T,Compare,Allocator>& x, const map<Key,T,Compare,Allocator>& y);

//  specialized algorithms:
template <class Key, class T, class Compare, class Allocator>
void
swap(map<Key,T,Compare,Allocator>& x, map<Key,T,Compare,Allocator>& y);

// multimap

template <class Key, class T, class Compare = less<Key>,
          class Allocator = allocator<pair<const Key, T> > >
class multimap
{
public:
	//  types:
	typedef Key                                   key_type;
	typedef T                                     mapped_type;
	typedef pair<const Key,T>                     value_type;
	typedef Compare                               key_compare;
	typedef Allocator                             allocator_type;
	typedef typename Allocator::reference         reference;
	typedef typename Allocator::const_reference   const_reference;
	typedef typename Allocator::size_type         size_type;
	typedef typename Allocator::difference_type   difference_type;
	typedef typename Allocator::pointer           pointer;
	typedef typename Allocator::const_pointer     const_pointer;

	struct debug_view
	{
		debug_view* left_;
		debug_view* right_;
		debug_view* parent_;
		value_type data_;
	};

	class value_compare
		: public binary_function<value_type,value_type,bool>
	{
	public:
		bool operator()(const value_type& x, const value_type& y) const
		{
			return comp(x.first, y.first);
		}
		bool operator()(const key_type& x, const value_type& y) const
		{
			return comp(x, y.first);
		}
		bool operator()(const value_type& x, const key_type& y) const
		{
			return comp(x.first, y);
		}
	protected:
		Compare comp;

		value_compare() {}
		value_compare(Compare c) : comp(c) {}

		friend class multimap;
	};

private:
	typedef __tree<value_type, value_compare, allocator_type> tree_type;
public:
	typedef typename tree_type::iterator       iterator;
	typedef typename tree_type::const_iterator const_iterator;
	typedef _STD::reverse_iterator<iterator>       reverse_iterator;
	typedef _STD::reverse_iterator<const_iterator> const_reverse_iterator;

	//  construct/copy/destroy:
	         multimap();
	explicit multimap(const Compare& comp);
	         multimap(const Compare& comp, const Allocator& a);
	#ifndef _MSL_NO_MEMBER_TEMPLATE
		template <class InputIterator>
			inline
			multimap(InputIterator first, InputIterator last)
				: tree_(first, last, true, value_compare(), allocator_type())
			{
			}
		template <class InputIterator>
			inline
			multimap(InputIterator first, InputIterator last, const Compare& comp)
				: tree_(first, last, true, value_compare(comp), allocator_type())
			{
			}
		template <class InputIterator>
			inline
			multimap(InputIterator first, InputIterator last, const Compare& comp,
				const Allocator& a)
				: tree_(first, last, true, value_compare(comp), a)
			{
			}
	#else
		multimap(const_iterator first, const_iterator last, const Compare& comp = Compare(),
				const Allocator& a = Allocator());
		multimap(const value_type* first, const value_type* last, const Compare& comp = Compare(),
				const Allocator& a = Allocator());
	#endif
	allocator_type get_allocator() const;

	//  iterators:
	iterator               begin();
	const_iterator         begin() const;
	iterator               end();
	const_iterator         end() const;
	reverse_iterator       rbegin();
	const_reverse_iterator rbegin() const;
	reverse_iterator       rend();
	const_reverse_iterator rend() const;

	//  capacity:
	bool           empty() const;
	size_type      size() const;
	size_type      max_size() const;

	//  modifiers:
	iterator insert(const value_type& x);
	iterator insert(iterator position, const value_type& x);
	#ifndef _MSL_NO_MEMBER_TEMPLATE
		template <class InputIterator>
			inline
			void insert(InputIterator first, InputIterator last)
			{
				tree_.insert_multi(first, last);
			}
	#else
		void insert(const_iterator first, const_iterator last);
		void insert(const value_type* first, const value_type* last);
	#endif

	void      erase(iterator position);
	size_type erase(const key_type& x);
	void      erase(iterator first, iterator last);
	void swap(multimap<Key,T,Compare,Allocator>& x);
	void clear();

	//  observers:
	key_compare    key_comp() const;
	value_compare  value_comp() const;

	//  map operations:
	iterator       find(const key_type& x);
	const_iterator find(const key_type& x) const;
	size_type      count(const key_type& x) const;

	iterator       lower_bound(const key_type& x);
	const_iterator lower_bound(const key_type& x) const;
	iterator       upper_bound(const key_type& x);
	const_iterator upper_bound(const key_type& x) const;

	pair<iterator,iterator> equal_range(const key_type& x);
	pair<const_iterator,const_iterator> equal_range(const key_type& x) const;

	bool invariants() const;
private:
	tree_type tree_;
};

template <class Key, class T, class Compare, class Allocator>
bool
operator==(const multimap<Key,T,Compare,Allocator>& x, const multimap<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator< (const multimap<Key,T,Compare,Allocator>& x, const multimap<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator!=(const multimap<Key,T,Compare,Allocator>& x, const multimap<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator> (const multimap<Key,T,Compare,Allocator>& x, const multimap<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator>=(const multimap<Key,T,Compare,Allocator>& x, const multimap<Key,T,Compare,Allocator>& y);

template <class Key, class T, class Compare, class Allocator>
bool
operator<=(const multimap<Key,T,Compare,Allocator>& x, const multimap<Key,T,Compare,Allocator>& y);

//  specialized algorithms:
template <class Key, class T, class Compare, class Allocator>
void
swap(multimap<Key,T,Compare,Allocator>& x, multimap<Key,T,Compare,Allocator>& y);

// map implementation

template <class Key, class T, class Compare, class Allocator>
inline
map<Key, T, Compare, Allocator>::map()
	: tree_(value_compare(), allocator_type())
{
}

template <class Key, class T, class Compare, class Allocator>
inline
map<Key, T, Compare, Allocator>::map(const Compare& comp)
	: tree_(value_compare(comp), allocator_type())
{
}

template <class Key, class T, class Compare, class Allocator>
inline
map<Key, T, Compare, Allocator>::map(const Compare& comp, const Allocator& a)
	: tree_(value_compare(comp), a)
{
}

#ifdef _MSL_NO_MEMBER_TEMPLATE

	template <class Key, class T, class Compare, class Allocator>
	inline
	map<Key, T, Compare, Allocator>::map(const_iterator first, const_iterator last,
		const Compare& comp, const Allocator& a)
		: tree_(first, last, false, value_compare(comp), a)
	{
	}

	template <class Key, class T, class Compare, class Allocator>
	inline
	map<Key, T, Compare, Allocator>::map(const value_type* first, const value_type* last,
		const Compare& comp, const Allocator& a)
		: tree_(first, last, false, value_compare(comp), a)
	{
	}

#endif

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::allocator_type
map<Key, T, Compare, Allocator>::get_allocator() const
{
	return tree_.get_allocator();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::iterator
map<Key, T, Compare, Allocator>::begin()
{
	return tree_.begin();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::const_iterator
map<Key, T, Compare, Allocator>::begin() const
{
	return tree_.begin();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::iterator
map<Key, T, Compare, Allocator>::end()
{
	return tree_.end();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::const_iterator
map<Key, T, Compare, Allocator>::end() const
{
	return tree_.end();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::reverse_iterator
map<Key, T, Compare, Allocator>::rbegin()
{
	return reverse_iterator(end());
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::const_reverse_iterator
map<Key, T, Compare, Allocator>::rbegin() const
{
	return const_reverse_iterator(end());
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::reverse_iterator
map<Key, T, Compare, Allocator>::rend()
{
	return reverse_iterator(begin());
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::const_reverse_iterator
map<Key, T, Compare, Allocator>::rend() const
{
	return const_reverse_iterator(begin());
}

template <class Key, class T, class Compare, class Allocator>
inline
bool
map<Key, T, Compare, Allocator>::empty() const
{
	return tree_.empty();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::size_type
map<Key, T, Compare, Allocator>::size() const
{
	return tree_.size();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::size_type
map<Key, T, Compare, Allocator>::max_size() const
{
	return tree_.max_size();
}

// hh 990820
template <class Key, class T, class Compare, class Allocator>
inline
T&
map<Key, T, Compare, Allocator>::operator[](const key_type& x)
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.template find_or_insert<key_type, mapped_type>(x).second;
#else
	return insert(value_type(x, T())).first->second;
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
pair<typename map<Key, T, Compare, Allocator>::iterator, bool>
map<Key, T, Compare, Allocator>::insert(const value_type& x)
{
	return tree_.insert_one(x);
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::iterator
map<Key, T, Compare, Allocator>::insert(iterator position, const value_type& x)
{
	return tree_.insert_one(position, x);
}

#ifdef _MSL_NO_MEMBER_TEMPLATE

	template <class Key, class T, class Compare, class Allocator>
	inline
	void
	map<Key, T, Compare, Allocator>::insert(const_iterator first, const_iterator last)
	{
		tree_.insert_one(first, last);
	}

	template <class Key, class T, class Compare, class Allocator>
	inline
	void
	map<Key, T, Compare, Allocator>::insert(const value_type* first, const value_type* last)
	{
		tree_.insert_one(first, last);
	}

#endif

template <class Key, class T, class Compare, class Allocator>
inline
void
map<Key, T, Compare, Allocator>::erase(iterator position)
{
	tree_.erase(position);
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::size_type
map<Key, T, Compare, Allocator>::erase(const key_type& x)
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.erase_one(x);
#else
	return tree_.erase_one((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
void
map<Key, T, Compare, Allocator>::erase(iterator first, iterator last)
{
	tree_.erase(first, last);
}

template <class Key, class T, class Compare, class Allocator>
inline
void
map<Key, T, Compare, Allocator>::swap(map<Key,T,Compare,Allocator>& x)
{
	tree_.swap(x.tree_);
}

template <class Key, class T, class Compare, class Allocator>
inline
void
map<Key, T, Compare, Allocator>::clear()
{
	tree_.clear();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::key_compare
map<Key, T, Compare, Allocator>::key_comp() const
{
	return tree_.value_comp().comp;
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::value_compare
map<Key, T, Compare, Allocator>::value_comp() const
{
	return tree_.value_comp();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::iterator
map<Key, T, Compare, Allocator>::find(const key_type& x)
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.find(x);
#else
	return tree_.find((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::const_iterator
map<Key, T, Compare, Allocator>::find(const key_type& x) const
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.find(x);
#else
	return tree_.find((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::size_type
map<Key, T, Compare, Allocator>::count(const key_type& x) const
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.count_one(x);
#else
	return tree_.count_one((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::iterator
map<Key, T, Compare, Allocator>::lower_bound(const key_type& x)
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.lower_bound(x);
#else
	return tree_.lower_bound((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::const_iterator
map<Key, T, Compare, Allocator>::lower_bound(const key_type& x) const
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.lower_bound(x);
#else
	return tree_.lower_bound((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::iterator
map<Key, T, Compare, Allocator>::upper_bound(const key_type& x)
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.upper_bound(x);
#else
	return tree_.upper_bound((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
typename map<Key, T, Compare, Allocator>::const_iterator
map<Key, T, Compare, Allocator>::upper_bound(const key_type& x) const
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.upper_bound(x);
#else
	return tree_.upper_bound((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
pair<typename map<Key, T, Compare, Allocator>::iterator, typename map<Key, T, Compare, Allocator>::iterator>
map<Key, T, Compare, Allocator>::equal_range(const key_type& x)
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.equal_range(x);
#else
	return tree_.equal_range((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
pair<typename map<Key, T, Compare, Allocator>::const_iterator, typename map<Key, T, Compare, Allocator>::const_iterator>
map<Key, T, Compare, Allocator>::equal_range(const key_type& x) const
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.equal_range(x);
#else
	return tree_.equal_range((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
bool
map<Key, T, Compare, Allocator>::invariants() const
{
	if (size() >= 2)
	{
		const_iterator p = begin();
		const_iterator i = p;
		value_compare c = value_comp();
		for (++i; i != end(); ++p, ++i)
		{
			if (!c(*p, *i))
				return false;
		} 
	}
	return tree_.invariants();
}

template <class Key, class T, class Compare, class Allocator>
inline
bool
operator==(const map<Key, T, Compare, Allocator>& x, const map<Key, T, Compare, Allocator>& y)
{
	return x.size() == y.size() && equal(x.begin(), x.end(), y.begin());
}

template <class Key, class T, class Compare, class Allocator>
inline
bool
operator!=(const map<Key, T, Compare, Allocator>& x, const map<Key, T, Compare, Allocator>& y)
{
	return !(x == y);
}

template <class Key, class T, class Compare, class Allocator>
inline
bool
operator< (const map<Key, T, Compare, Allocator>& x, const map<Key, T, Compare, Allocator>& y)
{
	return lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
}

template <class Key, class T, class Compare, class Allocator>
inline
bool
operator> (const map<Key, T, Compare, Allocator>& x, const map<Key, T, Compare, Allocator>& y)
{
	return y < x;
}

template <class Key, class T, class Compare, class Allocator>
inline
bool
operator>=(const map<Key, T, Compare, Allocator>& x, const map<Key, T, Compare, Allocator>& y)
{
	return !(x < y);
}

template <class Key, class T, class Compare, class Allocator>
inline
bool
operator<=(const map<Key, T, Compare, Allocator>& x, const map<Key, T, Compare, Allocator>& y)
{
	return !(y < x);
}

template <class Key, class T, class Compare, class Allocator>
inline
void
swap(map<Key, T, Compare, Allocator>& x, map<Key, T, Compare, Allocator>& y)
{
	x.swap(y);
}

// multimap implementation

template <class Key, class T, class Compare, class Allocator>
inline
multimap<Key, T, Compare, Allocator>::multimap()
	: tree_(value_compare(), allocator_type())
{
}

template <class Key, class T, class Compare, class Allocator>
inline
multimap<Key, T, Compare, Allocator>::multimap(const Compare& comp)
	: tree_(value_compare(comp), allocator_type())
{
}

template <class Key, class T, class Compare, class Allocator>
inline
multimap<Key, T, Compare, Allocator>::multimap(const Compare& comp, const Allocator& a)
	: tree_(value_compare(comp), a)
{
}

#ifdef _MSL_NO_MEMBER_TEMPLATE

	template <class Key, class T, class Compare, class Allocator>
	inline
	multimap<Key, T, Compare, Allocator>::multimap(const_iterator first, const_iterator last,
		const Compare& comp, const Allocator& a)
		: tree_(first, last, true, value_compare(comp), a)
	{
	}

	template <class Key, class T, class Compare, class Allocator>
	inline
	multimap<Key, T, Compare, Allocator>::multimap(const value_type* first, const value_type* last,
		const Compare& comp, const Allocator& a)
		: tree_(first, last, true, value_compare(comp), a)
	{
	}

#endif

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::allocator_type
multimap<Key, T, Compare, Allocator>::get_allocator() const
{
	return tree_.get_allocator();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::iterator
multimap<Key, T, Compare, Allocator>::begin()
{
	return tree_.begin();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::const_iterator
multimap<Key, T, Compare, Allocator>::begin() const
{
	return tree_.begin();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::iterator
multimap<Key, T, Compare, Allocator>::end()
{
	return tree_.end();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::const_iterator
multimap<Key, T, Compare, Allocator>::end() const
{
	return tree_.end();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::reverse_iterator
multimap<Key, T, Compare, Allocator>::rbegin()
{
	return reverse_iterator(end());
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::const_reverse_iterator
multimap<Key, T, Compare, Allocator>::rbegin() const
{
	return const_reverse_iterator(end());
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::reverse_iterator
multimap<Key, T, Compare, Allocator>::rend()
{
	return reverse_iterator(begin());
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::const_reverse_iterator
multimap<Key, T, Compare, Allocator>::rend() const
{
	return const_reverse_iterator(begin());
}

template <class Key, class T, class Compare, class Allocator>
inline
bool
multimap<Key, T, Compare, Allocator>::empty() const
{
	return tree_.empty();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::size_type
multimap<Key, T, Compare, Allocator>::size() const
{
	return tree_.size();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::size_type
multimap<Key, T, Compare, Allocator>::max_size() const
{
	return tree_.max_size();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::iterator
multimap<Key, T, Compare, Allocator>::insert(const value_type& x)
{
	return tree_.insert_multi(x);
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::iterator
multimap<Key, T, Compare, Allocator>::insert(iterator position, const value_type& x)
{
	return tree_.insert_multi(position, x);
}

#ifdef _MSL_NO_MEMBER_TEMPLATE

	template <class Key, class T, class Compare, class Allocator>
	inline
	void
	multimap<Key, T, Compare, Allocator>::insert(const_iterator first, const_iterator last)
	{
		tree_.insert_multi(first, last);
	}

	template <class Key, class T, class Compare, class Allocator>
	inline
	void
	multimap<Key, T, Compare, Allocator>::insert(const value_type* first, const value_type* last)
	{
		tree_.insert_multi(first, last);
	}

#endif

template <class Key, class T, class Compare, class Allocator>
inline
void
multimap<Key, T, Compare, Allocator>::erase(iterator position)
{
	tree_.erase(position);
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::size_type
multimap<Key, T, Compare, Allocator>::erase(const key_type& x)
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.erase_multi(x);
#else
	return tree_.erase_multi((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
void
multimap<Key, T, Compare, Allocator>::erase(iterator first, iterator last)
{
	tree_.erase(first, last);
}

template <class Key, class T, class Compare, class Allocator>
inline
void
multimap<Key, T, Compare, Allocator>::swap(multimap<Key,T,Compare,Allocator>& x)
{
	tree_.swap(x.tree_);
}

template <class Key, class T, class Compare, class Allocator>
inline
void
multimap<Key, T, Compare, Allocator>::clear()
{
	tree_.clear();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::key_compare
multimap<Key, T, Compare, Allocator>::key_comp() const
{
	return tree_.value_comp().comp;
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::value_compare
multimap<Key, T, Compare, Allocator>::value_comp() const
{
	return tree_.value_comp();
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::iterator
multimap<Key, T, Compare, Allocator>::find(const key_type& x)
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.find(x);
#else
	return tree_.find((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::const_iterator
multimap<Key, T, Compare, Allocator>::find(const key_type& x) const
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.find(x);
#else
	return tree_.find((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::size_type
multimap<Key, T, Compare, Allocator>::count(const key_type& x) const
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.count_multi(x);
#else
	return tree_.count_multi((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::iterator
multimap<Key, T, Compare, Allocator>::lower_bound(const key_type& x)
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.lower_bound(x);
#else
	return tree_.lower_bound((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::const_iterator
multimap<Key, T, Compare, Allocator>::lower_bound(const key_type& x) const
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.lower_bound(x);
#else
	return tree_.lower_bound((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::iterator
multimap<Key, T, Compare, Allocator>::upper_bound(const key_type& x)
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.upper_bound(x);
#else
	return tree_.upper_bound((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
typename multimap<Key, T, Compare, Allocator>::const_iterator
multimap<Key, T, Compare, Allocator>::upper_bound(const key_type& x) const
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.upper_bound(x);
#else
	return tree_.upper_bound((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
pair<typename multimap<Key, T, Compare, Allocator>::iterator, typename multimap<Key, T, Compare, Allocator>::iterator>
multimap<Key, T, Compare, Allocator>::equal_range(const key_type& x)
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.equal_range(x);
#else
	return tree_.equal_range((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
inline
pair<typename multimap<Key, T, Compare, Allocator>::const_iterator, typename multimap<Key, T, Compare, Allocator>::const_iterator>
multimap<Key, T, Compare, Allocator>::equal_range(const key_type& x) const
{
#if !defined(_MSL_NO_MEMBER_TEMPLATE) && !defined(_MSL_MUST_INLINE_MEMBER_TEMPLATE)
	return tree_.equal_range(x);
#else
	return tree_.equal_range((const value_type&)pair<const Key, int>(x, 0));
#endif
}

template <class Key, class T, class Compare, class Allocator>
bool
multimap<Key, T, Compare, Allocator>::invariants() const
{
	if (size() >= 2)
	{
		const_iterator p = begin();
		const_iterator i = p;
		value_compare c = value_comp();
		for (++i; i != end(); ++p, ++i)
		{
			if (c(*i, *p))
				return false;
		} 
	}
	return tree_.invariants();
}

template <class Key, class T, class Compare, class Allocator>
inline
bool
operator==(const multimap<Key, T, Compare, Allocator>& x, const multimap<Key, T, Compare, Allocator>& y)
{
	return x.size() == y.size() && equal(x.begin(), x.end(), y.begin());
}

template <class Key, class T, class Compare, class Allocator>
inline
bool
operator!=(const multimap<Key, T, Compare, Allocator>& x, const multimap<Key, T, Compare, Allocator>& y)
{
	return !(x == y);
}

template <class Key, class T, class Compare, class Allocator>
inline
bool
operator< (const multimap<Key, T, Compare, Allocator>& x, const multimap<Key, T, Compare, Allocator>& y)
{
	return lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
}

template <class Key, class T, class Compare, class Allocator>
inline
bool
operator> (const multimap<Key, T, Compare, Allocator>& x, const multimap<Key, T, Compare, Allocator>& y)
{
	return y < x;
}

template <class Key, class T, class Compare, class Allocator>
inline
bool
operator>=(const multimap<Key, T, Compare, Allocator>& x, const multimap<Key, T, Compare, Allocator>& y)
{
	return !(x < y);
}

template <class Key, class T, class Compare, class Allocator>
inline
bool
operator<=(const multimap<Key, T, Compare, Allocator>& x, const multimap<Key, T, Compare, Allocator>& y)
{
	return !(y < x);
}

template <class Key, class T, class Compare, class Allocator>
inline
void
swap(multimap<Key, T, Compare, Allocator>& x, multimap<Key, T, Compare, Allocator>& y)
{
	x.swap(y);
}

#ifndef _MSL_NO_CPP_NAMESPACE
	} // namespace std
#endif

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
	#pragma enumsalwaysint reset
#endif

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
	#pragma bool reset
#endif

#pragma options align=reset

#endif // RC_INVOKED

#endif // _MAP

// hh 971220 fixed MOD_INCLUDE
// hh 971222 added alignment wrapper
// hh 971222 Changed filename from map.h to map
// hh 971222 Made include guards standard
// hh 971230 added RC_INVOKED wrapper
// hh 980805 changed default allocator
// hh 981130 rewrote
// hh 990820 Optimized methods operating with keys only.
// hh 990820 Optimized operator []
// hh 000130 Renamed from tree.h to tree
// hh 000130 Got rid of default arguments involving references
// hh 010402 Removed 68K CMF support
