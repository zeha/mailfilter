/* Metrowerks Standard Library
 * Copyright © 1995-2002 Metrowerks Corporation.  All rights reserved.
 *
 * $Date: 2002/07/01 21:13:34 $ 
 * $Revision: 1.3 $ 
 */

// limits       // hh 971227 changed file name from mlimits.h to limits

#ifndef _LIMITS    // hh 971227 made include guards standard
#define _LIMITS

/*  limits synopsis

namespace std {

template<class T>
class numeric_limits
{
public:
	static const bool is_specialized = false;
	static T min() throw();
	static T max() throw();

	static const int  digits = 0;
	static const int  digits10 = 0;
	static const bool is_signed = false;
	static const bool is_integer = false;
	static const bool is_exact = false;
	static const int  radix = 0;
	static T epsilon() throw();
	static T round_error() throw();

	static const int  min_exponent = 0;
	static const int  min_exponent10 = 0;
	static const int  max_exponent = 0;
	static const int  max_exponent10 = 0;

	static const bool has_infinity = false;
	static const bool has_quiet_NaN = false;
	static const bool has_signaling_NaN = false;
	static const float_denorm_style has_denorm = denorm_absent;
	static const bool has_denorm_loss = false;
	static T infinity() throw();
	static T quiet_NaN() throw();
	static T signaling_NaN() throw();
	static T denorm_min() throw();

	static const bool is_iec559 = false;
	static const bool is_bounded = false;
	static const bool is_modulo = false;

	static const bool traps = false;
	static const bool tinyness_before = false;
	static const float_round_style round_style = round_toward_zero;
};

enum float_round_style;
enum float_denorm_style;

template<> class numeric_limits<bool>;

template<> class numeric_limits<char>;
template<> class numeric_limits<signed char>;
template<> class numeric_limits<unsigned char>;
template<> class numeric_limits<wchar_t>;

template<> class numeric_limits<short>;
template<> class numeric_limits<int>;
template<> class numeric_limits<long>;
template<> class numeric_limits<long long>;          // Metrowerks extension
template<> class numeric_limits<unsigned short>;
template<> class numeric_limits<unsigned int>;
template<> class numeric_limits<unsigned long>;
template<> class numeric_limits<unsigned long long>; // Metrowerks extension

template<> class numeric_limits<float>;
template<> class numeric_limits<double>;
template<> class numeric_limits<long double>;

}  // std
*/

#include <mslconfig>

#ifndef _No_Floating_Point
	#include <cfloat>
	#include <cmath>
#endif
#ifdef _MSL_CANT_DO_LIMITS
	#include <climits>
	#if !defined(_MSL_NO_WCHART_LANG_SUPPORT) && !defined(_MSL_NO_WCHART_CPP_SUPPORT) && !defined(_MSL_NO_WCHART_C_SUPPORT)
		#include <cwchar>
	#endif
#endif

#ifndef RC_INVOKED // hh 971230

#pragma options align=native

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
	#if _MSL_FORCE_ENUMS_ALWAYS_INT
		#pragma enumsalwaysint on
	#else
		#pragma enumsalwaysint off
	#endif
#endif

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
	#if _MSL_FORCE_ENABLE_BOOL_SUPPORT
		#pragma bool on
	#else
		#pragma bool off
	#endif
#endif

#ifndef _MSL_NO_CPP_NAMESPACE
	namespace std {
#endif

enum float_round_style
{
	round_indeterminate       = -1,
	round_toward_zero         =  0,
	round_to_nearest          =  1,
	round_toward_infinity     =  2,
	round_toward_neg_infinity =  3
};

enum float_denorm_style
{    // hh 971227 added
	denorm_indeterminate = -1,
	denorm_absent        =  0,
	denorm_present       =  1
};

#ifdef min
#undef min
#endif

#ifdef max
#undef max
#endif

#ifndef _MSL_CANT_DO_LIMITS

template <unsigned char b = (unsigned char)(~0)>
struct __char
{
	static const int bits = 1 + __char<(unsigned char)(b >> 1)>::bits;
};

template <>
struct __char<0>
{
	static const int bits = 0;
};

template <class T, bool is_signed = T(-1) < T(0)> struct __two_complement;

template <class T>
struct __two_complement<T, false>
{
	static const bool is_signed = false;
	static const int  digits    = sizeof(T) * __char<>::bits;
	static const int  digits10  = digits * 3 / 10;
	static const T    min       = T(0);
	static const T    max       = T(~0);
};

template <class T>
struct __two_complement<T, true>
{
	static const bool is_signed = true;
	static const int  digits    = sizeof(T) * __char<>::bits - 1;
	static const int  digits10  = digits * 3 / 10;
	static const T    min       = T(T(1) << digits);
	static const T    max       = T(T(~0) ^ min);
};

#endif  // _MSL_CANT_DO_LIMITS

template <class T>
class numeric_limits
{
public:
	static const bool is_specialized = false;   // hh 971227 completed class definition
	static T min() _MSL_THROW {return T();}
	static T max() _MSL_THROW {return T();}
	static const int  digits = 0;
	static const int  digits10 = 0;
	static const bool is_signed = false;
	static const bool is_integer = false;
	static const bool is_exact = false;
	static const int  radix = 0;
	static T epsilon() _MSL_THROW {return T();}
	static T round_error() _MSL_THROW {return T();}

	static const int  min_exponent = 0;
	static const int  min_exponent10 = 0;
	static const int  max_exponent = 0;
	static const int  max_exponent10 = 0;

	static const bool has_infinity = false;
	static const bool has_quiet_NaN = false;
	static const bool has_signaling_NaN = false;
	static const float_denorm_style has_denorm = denorm_absent;
	static const bool has_denorm_loss = false;
	static T infinity() _MSL_THROW {return T();}
	static T quiet_NaN() _MSL_THROW {return T();}
	static T signaling_NaN() _MSL_THROW {return T();}
	static T denorm_min() _MSL_THROW {return T();}

	static const bool is_iec559 = false;
	static const bool is_bounded = false;
	static const bool is_modulo = false;

	static const bool traps = false;
	static const bool tinyness_before = false;
	static const float_round_style round_style = round_toward_zero;
};

#ifndef _MSL_NO_BOOL

	template <>
	class numeric_limits <bool>
	{
	public:
		static const bool is_specialized = true;
		static bool min() _MSL_THROW {return false;}
		static bool max() _MSL_THROW {return true;}
		static const int  digits = 1;
		static const int  digits10 = 0;
		static const bool is_signed = false;
		static const bool is_integer = true;
		static const bool is_exact = true;
		static const int  radix = 2;
		static bool epsilon() _MSL_THROW {return false;}
		static bool round_error() _MSL_THROW {return false;}

		static const int  min_exponent = 0;
		static const int  min_exponent10 = 0;
		static const int  max_exponent = 0;
		static const int  max_exponent10 = 0;

		static const bool has_infinity = false;
		static const bool has_quiet_NaN = false;
		static const bool has_signaling_NaN = false;
		static const float_denorm_style has_denorm = denorm_absent;
		static const bool has_denorm_loss = false;
		static bool infinity() _MSL_THROW {return false;}
		static bool quiet_NaN() _MSL_THROW {return false;}
		static bool signaling_NaN() _MSL_THROW {return false;}
		static bool denorm_min() _MSL_THROW {return false;}

		static const bool is_iec559 = false;
		static const bool is_bounded = true;
		static const bool is_modulo = false;

		static const bool traps = false;
		static const bool tinyness_before = false;
		static const float_round_style round_style = round_toward_zero;
	};

#endif

template <>
class numeric_limits <char>
#ifndef _MSL_CANT_DO_LIMITS
	: private __two_complement<char>
{
private:
	typedef __two_complement<char> base;
#else
{
#endif
public:
	static const bool is_specialized = true;
#ifndef _MSL_CANT_DO_LIMITS
	static char       min() _MSL_THROW {return base::min;}
	static char       max() _MSL_THROW {return base::max;}
	static const int  digits     = base::digits;
	static const int  digits10   = base::digits10;
	static const bool is_signed  = base::is_signed;
#else
	static char       min() _MSL_THROW {return CHAR_MIN;}
	static char       max() _MSL_THROW {return CHAR_MAX;}
	static const int  digits     = 7;
	static const int  digits10   = 2;
	static const bool is_signed  = true;
#endif
	static const bool is_integer = true;
	static const bool is_exact   = true;
	static const int  radix      = 2;
	static char       epsilon() _MSL_THROW {return 0;}
	static char       round_error() _MSL_THROW {return 0;}

	static const int  min_exponent   = 0;
	static const int  min_exponent10 = 0;
	static const int  max_exponent   = 0;
	static const int  max_exponent10 = 0;

	static const bool has_infinity      = false;
	static const bool has_quiet_NaN     = false;
	static const bool has_signaling_NaN = false;
	static const float_denorm_style has_denorm = denorm_absent;
	static const bool has_denorm_loss   = false;
	static char       infinity() _MSL_THROW {return 0;}
	static char       quiet_NaN() _MSL_THROW {return 0;}
	static char       signaling_NaN() _MSL_THROW {return 0;}
	static char       denorm_min() _MSL_THROW {return 0;}

	static const bool is_iec559  = false;
	static const bool is_bounded = true;
	static const bool is_modulo  = true;

	static const bool traps = false;
	static const bool tinyness_before = false;
	static const float_round_style round_style = round_toward_zero;
};

template <>
class numeric_limits <signed char>
#ifndef _MSL_CANT_DO_LIMITS
	: private __two_complement<signed char>
{
private:
	typedef __two_complement<signed char> base;
#else
{
#endif
public:
	static const bool is_specialized = true;
#ifndef _MSL_CANT_DO_LIMITS
	static signed char min() _MSL_THROW {return base::min;}
	static signed char max() _MSL_THROW {return base::max;}
	static const int digits = base::digits;
	static const int  digits10 = base::digits10;
	static const bool is_signed = base::is_signed;
#else
	static signed char min() _MSL_THROW {return SCHAR_MIN;}
	static signed char max() _MSL_THROW {return SCHAR_MAX;}
	static const int digits = 7;
	static const int  digits10 = 2;
	static const bool is_signed = true;
#endif
	static const bool is_integer = true;
	static const bool is_exact = true;
	static const int  radix = 2;
	static signed char epsilon() _MSL_THROW {return 0;}
	static signed char round_error() _MSL_THROW {return 0;}

	static const int  min_exponent = 0;
	static const int  min_exponent10 = 0;
	static const int  max_exponent = 0;
	static const int  max_exponent10 = 0;

	static const bool has_infinity = false;
	static const bool has_quiet_NaN = false;
	static const bool has_signaling_NaN = false;
	static const float_denorm_style has_denorm = denorm_absent;
	static const bool has_denorm_loss = false;
	static signed char infinity() _MSL_THROW {return 0;}
	static signed char quiet_NaN() _MSL_THROW {return 0;}
	static signed char signaling_NaN() _MSL_THROW {return 0;}
	static signed char denorm_min() _MSL_THROW {return 0;}

	static const bool is_iec559 = false;
	static const bool is_bounded = true;
	static const bool is_modulo = true;

	static const bool traps = false;
	static const bool tinyness_before = false;
	static const float_round_style round_style = round_toward_zero;
};

template <>
class numeric_limits <unsigned char>
#ifndef _MSL_CANT_DO_LIMITS
	: private __two_complement<unsigned char>
{
private:
	typedef __two_complement<unsigned char> base;
#else
{
#endif
public:
	static const bool is_specialized = true;
#ifndef _MSL_CANT_DO_LIMITS
	static unsigned char min() _MSL_THROW {return base::min;}
	static unsigned char max() _MSL_THROW {return base::max;}
	static const int digits = base::digits;
	static const int  digits10 = base::digits10;
	static const bool is_signed = base::is_signed;
#else
	static unsigned char min() _MSL_THROW {return 0;}
	static unsigned char max() _MSL_THROW {return UCHAR_MAX;}
	static const int digits = 8;
	static const int  digits10 = 2;
	static const bool is_signed = false;
#endif
	static const bool is_integer = true;
	static const bool is_exact = true;
	static const int  radix = 2;
	static unsigned char epsilon() _MSL_THROW {return 0;}
	static unsigned char round_error() _MSL_THROW {return 0;}

	static const int  min_exponent = 0;
	static const int  min_exponent10 = 0;
	static const int  max_exponent = 0;
	static const int  max_exponent10 = 0;

	static const bool has_infinity = false;
	static const bool has_quiet_NaN = false;
	static const bool has_signaling_NaN = false;
	static const float_denorm_style has_denorm = denorm_absent;
	static const bool has_denorm_loss = false;
	static unsigned char infinity() _MSL_THROW {return 0;}
	static unsigned char quiet_NaN() _MSL_THROW {return 0;}
	static unsigned char signaling_NaN() _MSL_THROW {return 0;}
	static unsigned char denorm_min() _MSL_THROW {return 0;}

	static const bool is_iec559 = false;
	static const bool is_bounded = true;
	static const bool is_modulo = true;

	static const bool traps = false;
	static const bool tinyness_before = false;
	static const float_round_style round_style = round_toward_zero;
};

#if !defined(_MSL_NO_WCHART_LANG_SUPPORT) && !defined(_MSL_NO_WCHART_CPP_SUPPORT)

	template <>
	class numeric_limits <wchar_t>
	#ifndef _MSL_CANT_DO_LIMITS
		: private __two_complement<wchar_t>
	{
	private:
		typedef __two_complement<wchar_t> base;
	#else
	{
	#endif
	public:
		static const bool is_specialized = true;
	#ifndef _MSL_CANT_DO_LIMITS
		static wchar_t min() _MSL_THROW {return base::min;}
		static wchar_t max() _MSL_THROW {return base::max;}
		static const int digits = base::digits;
		static const int  digits10 = base::digits10;
		static const bool is_signed = base::is_signed;
	#else
		static wchar_t min() _MSL_THROW {return WCHAR_MIN;}
		static wchar_t max() _MSL_THROW {return WCHAR_MAX;}
		static const int digits = 16;
		static const int  digits10 = 4;
		static const bool is_signed = false;
	#endif
		static const bool is_integer = true;
		static const bool is_exact = true;
		static const int  radix = 2;
		static wchar_t epsilon() _MSL_THROW {return 0;}
		static wchar_t round_error() _MSL_THROW {return 0;}

		static const int  min_exponent = 0;
		static const int  min_exponent10 = 0;
		static const int  max_exponent = 0;
		static const int  max_exponent10 = 0;

		static const bool has_infinity = false;
		static const bool has_quiet_NaN = false;
		static const bool has_signaling_NaN = false;
		static const float_denorm_style has_denorm = denorm_absent;
		static const bool has_denorm_loss = false;
		static wchar_t infinity() _MSL_THROW {return 0;}
		static wchar_t quiet_NaN() _MSL_THROW {return 0;}
		static wchar_t signaling_NaN() _MSL_THROW {return 0;}
		static wchar_t denorm_min() _MSL_THROW {return 0;}

		static const bool is_iec559 = false;
		static const bool is_bounded = true;
		static const bool is_modulo = true;

		static const bool traps = false;
		static const bool tinyness_before = false;
		static const float_round_style round_style = round_toward_zero;
	};

#endif

template <>
class numeric_limits <short>
#ifndef _MSL_CANT_DO_LIMITS
	: private __two_complement<short>
{
private:
	typedef __two_complement<short> base;
#else
{
#endif
public:
	static const bool is_specialized = true;
#ifndef _MSL_CANT_DO_LIMITS
	static short min() _MSL_THROW {return base::min;}
	static short max() _MSL_THROW {return base::max;}
	static const int digits = base::digits;
	static const int  digits10 = base::digits10;
	static const bool is_signed = base::is_signed;
#else
	static short min() _MSL_THROW {return SHRT_MIN;}
	static short max() _MSL_THROW {return SHRT_MAX;}
	static const int digits = 15;
	static const int  digits10 = 4;
	static const bool is_signed = true;
#endif
	static const bool is_integer = true;
	static const bool is_exact = true;
	static const int  radix = 2;
	static short epsilon() _MSL_THROW {return 0;}
	static short round_error() _MSL_THROW {return 0;}

	static const int  min_exponent = 0;
	static const int  min_exponent10 = 0;
	static const int  max_exponent = 0;
	static const int  max_exponent10 = 0;

	static const bool has_infinity = false;
	static const bool has_quiet_NaN = false;
	static const bool has_signaling_NaN = false;
	static const float_denorm_style has_denorm = denorm_absent;
	static const bool has_denorm_loss = false;
	static short infinity() _MSL_THROW {return 0;}
	static short quiet_NaN() _MSL_THROW {return 0;}
	static short signaling_NaN() _MSL_THROW {return 0;}
	static short denorm_min() _MSL_THROW {return 0;}

	static const bool is_iec559 = false;
	static const bool is_bounded = true;
	static const bool is_modulo = true;

	static const bool traps = false;
	static const bool tinyness_before = false;
	static const float_round_style round_style = round_toward_zero;
};

template <>
class numeric_limits <unsigned short>
#ifndef _MSL_CANT_DO_LIMITS
	: private __two_complement<unsigned short>
{
private:
	typedef __two_complement<unsigned short> base;
#else
{
#endif
public:
	static const bool is_specialized = true;
#ifndef _MSL_CANT_DO_LIMITS
	static unsigned short min() _MSL_THROW {return base::min;}
	static unsigned short max() _MSL_THROW {return base::max;}
	static const int digits = base::digits;
	static const int  digits10 = base::digits10;
	static const bool is_signed = base::is_signed;
#else
	static unsigned short min() _MSL_THROW {return 0;}
	static unsigned short max() _MSL_THROW {return USHRT_MAX;}
	static const int digits = 16;
	static const int  digits10 = 4;
	static const bool is_signed = false;
#endif
	static const bool is_integer = true;
	static const bool is_exact = true;
	static const int  radix = 2;
	static unsigned short epsilon() _MSL_THROW {return 0;}
	static unsigned short round_error() _MSL_THROW {return 0;}

	static const int  min_exponent = 0;
	static const int  min_exponent10 = 0;
	static const int  max_exponent = 0;
	static const int  max_exponent10 = 0;

	static const bool has_infinity = false;
	static const bool has_quiet_NaN = false;
	static const bool has_signaling_NaN = false;
	static const float_denorm_style has_denorm = denorm_absent;
	static const bool has_denorm_loss = false;
	static unsigned short infinity() _MSL_THROW {return 0;}
	static unsigned short quiet_NaN() _MSL_THROW {return 0;}
	static unsigned short signaling_NaN() _MSL_THROW {return 0;}
	static unsigned short denorm_min() _MSL_THROW {return 0;}

	static const bool is_iec559 = false;
	static const bool is_bounded = true;
	static const bool is_modulo = true;

	static const bool traps = false;
	static const bool tinyness_before = false;
	static const float_round_style round_style = round_toward_zero;
};

template <>
class numeric_limits <int>
#ifndef _MSL_CANT_DO_LIMITS
	: private __two_complement<int>
{
private:
	typedef __two_complement<int> base;
#else
{
#endif
public:
	static const bool is_specialized = true;
#ifndef _MSL_CANT_DO_LIMITS
	static int min() _MSL_THROW {return base::min;}
	static int max() _MSL_THROW {return base::max;}
	static const int digits = base::digits;
	static const int  digits10 = base::digits10;
	static const bool is_signed = base::is_signed;
#else
	static int min() _MSL_THROW {return INT_MIN;}
	static int max() _MSL_THROW {return INT_MAX;}
	static const int digits = 31;
	static const int  digits10 = 9;
	static const bool is_signed = true;
#endif
	static const bool is_integer = true;
	static const bool is_exact = true;
	static const int  radix = 2;
	static int epsilon() _MSL_THROW {return 0;}
	static int round_error() _MSL_THROW {return 0;}

	static const int  min_exponent = 0;
	static const int  min_exponent10 = 0;
	static const int  max_exponent = 0;
	static const int  max_exponent10 = 0;

	static const bool has_infinity = false;
	static const bool has_quiet_NaN = false;
	static const bool has_signaling_NaN = false;
	static const float_denorm_style has_denorm = denorm_absent;
	static const bool has_denorm_loss = false;
	static int infinity() _MSL_THROW {return 0;}
	static int quiet_NaN() _MSL_THROW {return 0;}
	static int signaling_NaN() _MSL_THROW {return 0;}
	static int denorm_min() _MSL_THROW {return 0;}

	static const bool is_iec559 = false;
	static const bool is_bounded = true;
	static const bool is_modulo = true;

	static const bool traps = false;
	static const bool tinyness_before = false;
	static const float_round_style round_style = round_toward_zero;
};

template <>
class numeric_limits <unsigned int>
#ifndef _MSL_CANT_DO_LIMITS
	: private __two_complement<unsigned int>
{
private:
	typedef __two_complement<unsigned int> base;
#else
{
#endif
public:
	static const bool is_specialized = true;
#ifndef _MSL_CANT_DO_LIMITS
	static unsigned int min() _MSL_THROW {return base::min;}
	static unsigned int max() _MSL_THROW {return base::max;}
	static const int digits = base::digits;
	static const int  digits10 = base::digits10;
	static const bool is_signed = base::is_signed;
#else
	static unsigned int min() _MSL_THROW {return 0;}
	static unsigned int max() _MSL_THROW {return UINT_MAX;}
	static const int digits = 32;
	static const int  digits10 = 9;
	static const bool is_signed = false;
#endif
	static const bool is_integer = true;
	static const bool is_exact = true;
	static const int  radix = 2;
	static unsigned int epsilon() _MSL_THROW {return 0;}
	static unsigned int round_error() _MSL_THROW {return 0;}

	static const int  min_exponent = 0;
	static const int  min_exponent10 = 0;
	static const int  max_exponent = 0;
	static const int  max_exponent10 = 0;

	static const bool has_infinity = false;
	static const bool has_quiet_NaN = false;
	static const bool has_signaling_NaN = false;
	static const float_denorm_style has_denorm = denorm_absent;
	static const bool has_denorm_loss = false;
	static unsigned int infinity() _MSL_THROW {return 0;}
	static unsigned int quiet_NaN() _MSL_THROW {return 0;}
	static unsigned int signaling_NaN() _MSL_THROW {return 0;}
	static unsigned int denorm_min() _MSL_THROW {return 0;}

	static const bool is_iec559 = false;
	static const bool is_bounded = true;
	static const bool is_modulo = true;

	static const bool traps = false;
	static const bool tinyness_before = false;
	static const float_round_style round_style = round_toward_zero;
};

template <>
class numeric_limits <long>
#ifndef _MSL_CANT_DO_LIMITS
	: private __two_complement<long>
{
private:
	typedef __two_complement<long> base;
#else
{
#endif
public:
	static const bool is_specialized = true;
#ifndef _MSL_CANT_DO_LIMITS
	static long min() _MSL_THROW {return base::min;}
	static long max() _MSL_THROW {return base::max;}
	static const int digits = base::digits;
	static const int  digits10 = base::digits10;
	static const bool is_signed = base::is_signed;
#else
	static long min() _MSL_THROW {return LONG_MIN;}
	static long max() _MSL_THROW {return LONG_MAX;}
	static const int digits = 31;
	static const int  digits10 = 9;
	static const bool is_signed = true;
#endif
	static const bool is_integer = true;
	static const bool is_exact = true;
	static const int  radix = 2;
	static long epsilon() _MSL_THROW {return 0;}
	static long round_error() _MSL_THROW {return 0;}

	static const int  min_exponent = 0;
	static const int  min_exponent10 = 0;
	static const int  max_exponent = 0;
	static const int  max_exponent10 = 0;

	static const bool has_infinity = false;
	static const bool has_quiet_NaN = false;
	static const bool has_signaling_NaN = false;
	static const float_denorm_style has_denorm = denorm_absent;
	static const bool has_denorm_loss = false;
	static long infinity() _MSL_THROW {return 0;}
	static long quiet_NaN() _MSL_THROW {return 0;}
	static long signaling_NaN() _MSL_THROW {return 0;}
	static long denorm_min() _MSL_THROW {return 0;}

	static const bool is_iec559 = false;
	static const bool is_bounded = true;
	static const bool is_modulo = true;

	static const bool traps = false;
	static const bool tinyness_before = false;
	static const float_round_style round_style = round_toward_zero;
};

template <>
class numeric_limits <unsigned long>
#ifndef _MSL_CANT_DO_LIMITS
	: private __two_complement<unsigned long>
{
private:
	typedef __two_complement<unsigned long> base;
#else
{
#endif
public:
	static const bool is_specialized = true;
#ifndef _MSL_CANT_DO_LIMITS
	static unsigned long min() _MSL_THROW {return base::min;}
	static unsigned long max() _MSL_THROW {return base::max;}
	static const int digits = base::digits;
	static const int  digits10 = base::digits10;
	static const bool is_signed = base::is_signed;
#else
	static unsigned long min() _MSL_THROW {return 0;}
	static unsigned long max() _MSL_THROW {return ULONG_MAX;}
	static const int digits = 32;
	static const int  digits10 = 9;
	static const bool is_signed = false;
#endif
	static const bool is_integer = true;
	static const bool is_exact = true;
	static const int  radix = 2;
	static unsigned long epsilon() _MSL_THROW {return 0;}
	static unsigned long round_error() _MSL_THROW {return 0;}

	static const int  min_exponent = 0;
	static const int  min_exponent10 = 0;
	static const int  max_exponent = 0;
	static const int  max_exponent10 = 0;

	static const bool has_infinity = false;
	static const bool has_quiet_NaN = false;
	static const bool has_signaling_NaN = false;
	static const float_denorm_style has_denorm = denorm_absent;
	static const bool has_denorm_loss = false;
	static unsigned long infinity() _MSL_THROW {return 0;}
	static unsigned long quiet_NaN() _MSL_THROW {return 0;}
	static unsigned long signaling_NaN() _MSL_THROW {return 0;}
	static unsigned long denorm_min() _MSL_THROW {return 0;}

	static const bool is_iec559 = false;
	static const bool is_bounded = true;
	static const bool is_modulo = true;

	static const bool traps = false;
	static const bool tinyness_before = false;
	static const float_round_style round_style = round_toward_zero;
};

#ifdef __MSL_LONGLONG_SUPPORT__  // hh 990118

template <>
class numeric_limits <long long>
#ifndef _MSL_CANT_DO_LIMITS
	: private __two_complement<long long>
{
private:
	typedef __two_complement<long long> base;
#else
{
#endif
public:
	static const bool is_specialized = true;
#ifndef _MSL_CANT_DO_LIMITS
	static long long min() _MSL_THROW {return base::min;}
	static long long max() _MSL_THROW {return base::max;}
	static const int digits = base::digits;
	static const int  digits10 = base::digits10;
	static const bool is_signed = base::is_signed;
#else
	static long long min() _MSL_THROW {return LONGLONG_MIN;}
	static long long max() _MSL_THROW {return LONGLONG_MAX;}
	static const int digits = 63;
	static const int  digits10 = 18;
	static const bool is_signed = true;
#endif
	static const bool is_integer = true;
	static const bool is_exact = true;
	static const int  radix = 2;
	static long long epsilon() _MSL_THROW {return 0;}
	static long long round_error() _MSL_THROW {return 0;}

	static const int  min_exponent = 0;
	static const int  min_exponent10 = 0;
	static const int  max_exponent = 0;
	static const int  max_exponent10 = 0;

	static const bool has_infinity = false;
	static const bool has_quiet_NaN = false;
	static const bool has_signaling_NaN = false;
	static const float_denorm_style has_denorm = denorm_absent;
	static const bool has_denorm_loss = false;
	static long long infinity() _MSL_THROW {return 0;}
	static long long quiet_NaN() _MSL_THROW {return 0;}
	static long long signaling_NaN() _MSL_THROW {return 0;}
	static long long denorm_min() _MSL_THROW {return 0;}

	static const bool is_iec559 = false;
	static const bool is_bounded = true;
	static const bool is_modulo = true;

	static const bool traps = false;
	static const bool tinyness_before = false;
	static const float_round_style round_style = round_toward_zero;
};

template <>
class numeric_limits <unsigned long long>
#ifndef _MSL_CANT_DO_LIMITS
	: private __two_complement<unsigned long long>
{
private:
	typedef __two_complement<unsigned long long> base;
#else
{
#endif
public:
	static const bool is_specialized = true;
#ifndef _MSL_CANT_DO_LIMITS
	static unsigned long long min() _MSL_THROW {return base::min;}
	static unsigned long long max() _MSL_THROW {return base::max;}
	static const int digits = base::digits;
	static const int  digits10 = base::digits10;
	static const bool is_signed = base::is_signed;
#else
	static unsigned long long min() _MSL_THROW {return 0;}
	static unsigned long long max() _MSL_THROW {return ULONGLONG_MAX;}
	static const int digits = 64;
	static const int  digits10 = 19;
	static const bool is_signed = false;
#endif
	static const bool is_integer = true;
	static const bool is_exact = true;
	static const int  radix = 2;
	static unsigned long long epsilon() _MSL_THROW {return 0;}
	static unsigned long long round_error() _MSL_THROW {return 0;}

	static const int  min_exponent = 0;
	static const int  min_exponent10 = 0;
	static const int  max_exponent = 0;
	static const int  max_exponent10 = 0;

	static const bool has_infinity = false;
	static const bool has_quiet_NaN = false;
	static const bool has_signaling_NaN = false;
	static const float_denorm_style has_denorm = denorm_absent;
	static const bool has_denorm_loss = false;
	static unsigned long long infinity() _MSL_THROW {return 0;}
	static unsigned long long quiet_NaN() _MSL_THROW {return 0;}
	static unsigned long long signaling_NaN() _MSL_THROW {return 0;}
	static unsigned long long denorm_min() _MSL_THROW {return 0;}

	static const bool is_iec559 = false;
	static const bool is_bounded = true;
	static const bool is_modulo = true;

	static const bool traps = false;
	static const bool tinyness_before = false;
	static const float_round_style round_style = round_toward_zero;
};

#endif

#ifndef _No_Floating_Point

template <>
class numeric_limits <float>
{
public:
	static const bool is_specialized = true;
	static float min() _MSL_THROW {return FLT_MIN;}
	static float max() _MSL_THROW {return FLT_MAX;}
	static const int  digits = FLT_MANT_DIG;
	static const int  digits10 = FLT_DIG;
	static const bool is_signed = true;
	static const bool is_integer = false;
	static const bool is_exact = false;
	static const int  radix = FLT_RADIX;
	static float epsilon() _MSL_THROW {return FLT_EPSILON;}
	static float round_error() _MSL_THROW {return 0.5F;}

	static const int  min_exponent = FLT_MIN_EXP;
	static const int  min_exponent10 = FLT_MIN_10_EXP;
	static const int  max_exponent = FLT_MAX_EXP;
	static const int  max_exponent10 = FLT_MAX_10_EXP;

	#ifdef _MSL_NO_MATH_LIB
		static const bool has_infinity = false;
		static const bool has_quiet_NaN = false;
		static const bool has_signaling_NaN = false;
	#else
		static const bool has_infinity = true;
		static const bool has_quiet_NaN = true;
		#ifdef __INTEL__
			static const bool has_signaling_NaN = false;
		#else
			static const bool has_signaling_NaN = true;
		#endif
	#endif
	static const float_denorm_style has_denorm = denorm_absent;
	static const bool has_denorm_loss = false;
	#ifdef _MSL_NO_MATH_LIB
		static float infinity() _MSL_THROW {return 0.0F;}
		static float quiet_NaN() _MSL_THROW {return 0.0F;}
		static float signaling_NaN() _MSL_THROW {return 0.0F;}
	#else
		static float infinity() _MSL_THROW {return HUGE_VALF;}
		static float quiet_NaN() _MSL_THROW {return static_cast<float>(NAN);}
		static float signaling_NaN() _MSL_THROW {return static_cast<float>(NAN);}
	#endif
	static float denorm_min() _MSL_THROW {return min();}

	static const bool is_iec559 = true;
	static const bool is_bounded = true;
	static const bool is_modulo = false;

	static const bool traps = true;
	static const bool tinyness_before = true;
	static const float_round_style round_style = round_to_nearest;
};

template <>
class numeric_limits <double>
{
public:
	static const bool is_specialized = true;
	static double min() _MSL_THROW {return DBL_MIN;}
	static double max() _MSL_THROW {return DBL_MAX;}
	static const int  digits = DBL_MANT_DIG;
	static const int  digits10 = DBL_DIG;
	static const bool is_signed = true;
	static const bool is_integer = false;
	static const bool is_exact = false;
	static const int  radix = FLT_RADIX;
	static double epsilon() _MSL_THROW {return DBL_EPSILON;}
	static double round_error() _MSL_THROW {return 0.5;}

	static const int  min_exponent = DBL_MIN_EXP;
	static const int  min_exponent10 = DBL_MIN_10_EXP;
	static const int  max_exponent = DBL_MAX_EXP;
	static const int  max_exponent10 = DBL_MAX_10_EXP;

	#ifdef _MSL_NO_MATH_LIB
		static const bool has_infinity = false;
		static const bool has_quiet_NaN = false;
		static const bool has_signaling_NaN = false;
	#else
		static const bool has_infinity = true;
		static const bool has_quiet_NaN = true;
		#ifdef __INTEL__
			static const bool has_signaling_NaN = false;
		#else
			static const bool has_signaling_NaN = true;
		#endif
	#endif
	static const float_denorm_style has_denorm = denorm_absent;
	static const bool has_denorm_loss = false;
	#ifdef _MSL_NO_MATH_LIB
		static double infinity() _MSL_THROW {return 0.0;}
		static double quiet_NaN() _MSL_THROW {return 0.0;}
		static double signaling_NaN() _MSL_THROW {return 0.0;}
	#else
		static double infinity() _MSL_THROW {return HUGE_VAL;}
		static double quiet_NaN() _MSL_THROW {return static_cast<double>(NAN);}
		static double signaling_NaN() _MSL_THROW {return static_cast<double>(NAN);}
	#endif
	static double denorm_min() _MSL_THROW {return min();}

	static const bool is_iec559 = true;
	static const bool is_bounded = true;
	static const bool is_modulo = false;

	static const bool traps = true;
	static const bool tinyness_before = true;
	static const float_round_style round_style = round_to_nearest;
};

template <>
class numeric_limits <long double>
{
public:
	static const bool is_specialized = true;
	static long double min() _MSL_THROW {return LDBL_MIN;}
	static long double max() _MSL_THROW {return LDBL_MAX;}
	static const int  digits = LDBL_MANT_DIG;
	static const int  digits10 = LDBL_DIG;
	static const bool is_signed = true;
	static const bool is_integer = false;
	static const bool is_exact = false;
	static const int  radix = FLT_RADIX;
	static long double epsilon() _MSL_THROW {return LDBL_EPSILON;}
	static long double round_error() _MSL_THROW {return 0.5L;}

	static const int  min_exponent = LDBL_MIN_EXP;
	static const int  min_exponent10 = LDBL_MIN_10_EXP;
	static const int  max_exponent = LDBL_MAX_EXP;
	static const int  max_exponent10 = LDBL_MAX_10_EXP;

	#ifdef _MSL_NO_MATH_LIB
		static const bool has_infinity = false;
		static const bool has_quiet_NaN = false;
		static const bool has_signaling_NaN = false;
	#else
		static const bool has_infinity = true;
		static const bool has_quiet_NaN = true;
		#ifdef __INTEL__
			static const bool has_signaling_NaN = false;
		#else
			static const bool has_signaling_NaN = true;
		#endif
	#endif
	static const float_denorm_style has_denorm = denorm_absent;
	static const bool has_denorm_loss = false;
	#ifdef _MSL_NO_MATH_LIB
		static long double infinity() _MSL_THROW {return 0.0L;}
		static long double quiet_NaN() _MSL_THROW {return 0.0L;}
		static long double signaling_NaN() _MSL_THROW {return 0.0L;}
	#else
		static long double infinity() _MSL_THROW {return HUGE_VALL;}
		static long double quiet_NaN() _MSL_THROW {return static_cast<long double>(NAN);}
		static long double signaling_NaN() _MSL_THROW {return static_cast<long double>(NAN);}
	#endif
	static long double denorm_min() _MSL_THROW {return min();}

	static const bool is_iec559 = true;
	static const bool is_bounded = true;
	static const bool is_modulo = false;

	static const bool traps = true;
	static const bool tinyness_before = true;
	static const float_round_style round_style = round_to_nearest;
};

#endif // _No_Floating_Point

#ifndef _MSL_NO_CPP_NAMESPACE
	} // namespace std
#endif

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
	#pragma enumsalwaysint reset
#endif

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
	#pragma bool reset
#endif

#pragma options align=reset

#endif // RC_INVOKED

#endif // _LIMITS

// hh  971220 fixed MOD_C_INCLUDE
// hh  971222 added alignment wrapper
// hh  971227 added float_denorm_style
// hh  971227 completed class numeric_limits definition
// hh  971227 changed file name from mlimits.h to limits
// hh  971227 made include guards standard
// hh  971227 corrected spelling of signaling in many places
// hh  971230 added RC_INVOKED wrapper
// hh  980107 Rewrite
// hh  980408 wrapped in #ifndef _No_Floating_Point
// hh  990118 wrapped long long in __MSL_LONGLONG_SUPPORT__
// hh  990120 changed name of MSIPL flags
// hh  990617 Changed digits10 for integral types
// hh  991118 Changed integral versions of denorm_min to return 0.
// hh  000127 Made integral types independent of <climits>
//            Assumes a two's complement machine.
// hh  001011 Undid 000127 change for gcc only
// hh  010220 Added definitions to methods in unspecialized case
// hh  010402 Removed 68K CMF support
// hh  010727 Protected floating point includes for the case that floating point is being used
// hh  010820 Added static_cast to NAN in case it is not a float.
// blc 011211 If _MSL_NO_MATH_LIB, no NANs or INFs are defined
// blc 020110 Fixed earlier _MSL_NO_MATH_LIB patch to not leave members undefined.