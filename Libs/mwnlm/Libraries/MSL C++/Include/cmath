#ifndef __CMATH__
#define __CMATH__
#include <math.h>

/*	CLib does not contain all this stuff */

#if _NLM_USING_CLIB

#define FLT_EVAL_METHOD  0	

/*  special number macros */

#define INFINITY  ((float)(1.0/0.0))
#define NAN       ((float)(0.0/0.0))
#define HUGE_VALL	(LDBL_MAX)
#define HUGE_VALF	(FLT_MAX)

typedef unsigned int _UINT32;
typedef int _INT32;

#if __option(little_endian)
# define __HI(x) ( sizeof(x)==8 ? *(1+(_INT32*)&x) : (*(_INT32*)&x))
# define __LO(x) (*(_INT32*)&x)
# define __UHI(x) ( sizeof(x)==8 ? *(1+(_UINT32*)&x) : (*(_UINT32*)&x))
# define __ULO(x) (*(_UINT32*)&x)
#else
# define __LO(x) ( sizeof(x)==8 ? *(1+(_INT32*)&x) : (*(_INT32*)&x))
# define __HI(x) (*(_INT32*)&x)
# define __ULO(x) ( sizeof(x)==8 ? *(1+(_UINT32*)&x) : (*(_UINT32*)&x))
# define __UHI(x) (*(_UINT32*)&x)
#endif

#define FP_NAN       1  /*   quiet NaN (signaling Nan supported on MAC but nowhere else. */
#define FP_INFINITE  2  /*   + or - infinity      */
#define FP_ZERO      3  /*   + or - zero          */
#define FP_NORMAL    4  /*   all normal numbers   */
#define FP_SUBNORMAL 5  /*   denormal numbers     */

#define fpclassify(x)  \
	 ((sizeof(x) == sizeof(float))  ? __fpclassifyf((float)(x)) \
     :  __fpclassifyd((double)(x)) )

__inline int __fpclassifyf(float x)
{
 switch( (*(_INT32*)&x)&0x7f800000 )
  {
  case 0x7f800000:
   {
    if((*(_INT32*)&x)&0x007fffff) return FP_NAN;
    else return FP_INFINITE;
    break;
   }
  case 0:
   {
    if((*(_INT32*)&x)&0x007fffff) return FP_SUBNORMAL;
    else return FP_ZERO; 
    break; 
   }
  }
  return FP_NORMAL;
}  

/* fpclassify for doubles or integral types */

__inline int __fpclassifyd(double x) 
{
 switch(__HI(x)&0x7ff00000 )
  {
   case 0x7ff00000:
   {
    if((__HI(x)&0x000fffff) || (__LO(x)&0xffffffff)) return FP_NAN;
    else return FP_INFINITE;
    break;
   }
  case 0:
  {
    if((__HI(x)&0x000fffff) || (__LO(x)&0xffffffff)) return FP_SUBNORMAL;
    else return FP_ZERO; 
    break; 
  }
  
  }
  return FP_NORMAL;
} 

#define isnormal(x) (fpclassify(x) == FP_NORMAL)
#define isnan(x)    (fpclassify(x) == FP_NAN)
#define isinf(x)    (fpclassify(x) == FP_INFINITE)
#define isfinite(x) ((fpclassify(x) > FP_INFINITE))

#define signbit(x)((int)(__HI(x)&0x80000000))

#endif	//_NLM_USING_CLIB

#endif

/* Change Log:
 * ejs ?????? Initial version to overcome deficiencies in CLib
 * ejs 030522 Updated to avoid conflict with LibC
 */