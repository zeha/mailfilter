/* Metrowerks Standard Library
 * Copyright © 1995-2002 Metrowerks Corporation.  All rights reserved.
 *
 * $Date: 2002/07/01 21:13:36 $ 
 * $Revision: 1.3 $ 
 */

// set       // hh 971223 Changed filename from set.h to set

#ifndef _SET
#define _SET

/*  set synopsis

namespace std
{
template <class Key, class Compare = less<Key>, class Allocator = allocator<Key> >
class set
{
public:
	//  types:
	typedef Key                                   key_type;
	typedef Key                                   value_type;
	typedef Compare                               key_compare;
	typedef Compare                               value_compare;
	typedef Allocator                             allocator_type;
	typedef typename Allocator::reference         reference;
	typedef typename Allocator::const_reference   const_reference;
	typedef typename Allocator::size_type         size_type;
	typedef typename Allocator::difference_type   difference_type;
	typedef typename Allocator::pointer           pointer;
	typedef typename Allocator::const_pointer     const_pointer;

	class                                         iterator;       // bidirectional
	class                                         const_iterator; // bidirectional
	typedef std::reverse_iterator<iterator>       reverse_iterator;
	typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

	explicit set(const Compare& comp = Compare(), const Allocator& = Allocator());
	template <class InputIterator>
		set(InputIterator first, InputIterator last,
		    const Compare& comp = Compare(), const Allocator& = Allocator());
	set(const set& x);
	set& operator=(const set& x);
	~set();

	allocator_type get_allocator() const;
	size_type     max_size() const;

	size_type     size() const;
	bool          empty() const;

	iterator               begin();
	const_iterator         begin() const;
	iterator               end();
	const_iterator         end() const;

	reverse_iterator       rbegin();
	const_reverse_iterator rbegin() const;
	reverse_iterator       rend();
	const_reverse_iterator rend() const;

	pair<iterator,bool> insert(const value_type& x);
	iterator            insert(iterator position, const value_type& x);
	template <class InputIterator>
		void            insert(InputIterator first, InputIterator last);

	void      erase(iterator position);
	size_type erase(const key_type& x);
	void      erase(iterator first, iterator last);
	void clear();

	void swap(set& x);

	key_compare   key_comp() const;
	value_compare value_comp() const;

	iterator find(const key_type& x) const;
	size_type count(const key_type& x) const;

	iterator lower_bound(const key_type& x) const;
	iterator upper_bound(const key_type& x) const;

	pair<iterator, iterator> equal_range(const key_type& x) const;

	bool invariants() const;   // Metrowerks extension
};

template <class Key, class Compare, class Allocator>
bool
operator==(const set<Key,Compare,Allocator>& x, const set<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator< (const set<Key,Compare,Allocator>& x, const set<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator!=(const set<Key,Compare,Allocator>& x, const set<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator> (const set<Key,Compare,Allocator>& x, const set<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator>=(const set<Key,Compare,Allocator>& x, const set<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator<=(const set<Key,Compare,Allocator>& x, const set<Key,Compare,Allocator>& y);

//  specialized algorithms:
template <class Key, class Compare, class Allocator>
void
swap(set<Key,Compare,Allocator>& x, set<Key,Compare,Allocator>& y);

// multiset

template <class Key, class Compare = less<Key>, class Allocator = allocator<Key> >
class multiset
{
public:
	//  types:
	typedef Key                                   key_type;
	typedef Key                                   value_type;
	typedef Compare                               key_compare;
	typedef Compare                               value_compare;
	typedef Allocator                             allocator_type;
	typedef typename Allocator::reference         reference;
	typedef typename Allocator::const_reference   const_reference;
	typedef typename Allocator::size_type         size_type;
	typedef typename Allocator::difference_type   difference_type;
	typedef typename Allocator::pointer           pointer;
	typedef typename Allocator::const_pointer     const_pointer;

	class                                         iterator;       // bidirectional
	class                                         const_iterator; // bidirectional
	typedef std::reverse_iterator<iterator>       reverse_iterator;
	typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

	explicit multiset(const Compare& comp = Compare(), const Allocator& = Allocator());
	template <class InputIterator>
		multiset(InputIterator first, InputIterator last,
		         const Compare& comp = Compare(), const Allocator& = Allocator());
	multiset(const multiset& x);
	multiset& operator=(const multiset& x);
	~multiset();

	allocator_type get_allocator() const;
	size_type     max_size() const;

	size_type     size() const;
	bool          empty() const;

	iterator               begin();
	const_iterator         begin() const;
	iterator               end();
	const_iterator         end() const;

	reverse_iterator       rbegin();
	const_reverse_iterator rbegin() const;
	reverse_iterator       rend();
	const_reverse_iterator rend() const;

	iterator insert(const value_type& x);
	iterator insert(iterator position, const value_type& x);
	template <class InputIterator>
		void insert(InputIterator first, InputIterator last);

	void      erase(iterator position);
	size_type erase(const key_type& x);
	void      erase(iterator first, iterator last);
	void clear();

	void swap(multiset& x);

	key_compare   key_comp() const;
	value_compare value_comp() const;

	iterator find(const key_type& x) const;
	size_type count(const key_type& x) const;

	iterator lower_bound(const key_type& x) const;
	iterator upper_bound(const key_type& x) const;

	pair<iterator,iterator> equal_range(const key_type& x) const;

	bool invariants() const;   // Metrowerks extension
};

template <class Key, class Compare, class Allocator>
bool
operator==(const multiset<Key,Compare,Allocator>& x, const multiset<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator< (const multiset<Key,Compare,Allocator>& x, const multiset<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator!=(const multiset<Key,Compare,Allocator>& x, const multiset<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator> (const multiset<Key,Compare,Allocator>& x, const multiset<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator>=(const multiset<Key,Compare,Allocator>& x, const multiset<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator<=(const multiset<Key,Compare,Allocator>& x, const multiset<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
void
swap(multiset<Key,Compare,Allocator>& x, multiset<Key,Compare,Allocator>& y);

}  // std
*/

#include <mslconfig>
#include <tree>
#include <functional>

#ifndef RC_INVOKED

#pragma options align=native

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
	#if _MSL_FORCE_ENUMS_ALWAYS_INT
		#pragma enumsalwaysint on
	#else
		#pragma enumsalwaysint off
	#endif
#endif

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
	#if _MSL_FORCE_ENABLE_BOOL_SUPPORT
		#pragma bool on
	#else
		#pragma bool off
	#endif
#endif

#ifndef _MSL_NO_CPP_NAMESPACE
	namespace std {
#endif

// set

template <class Key, class Compare = less<Key>, class Allocator = allocator<Key> >
class set
{
public:
	//  types:
	typedef Key                                   key_type;
	typedef Key                                   value_type;
	typedef Compare                               key_compare;
	typedef Compare                               value_compare;
	typedef Allocator                             allocator_type;
	typedef typename Allocator::reference         reference;
	typedef typename Allocator::const_reference   const_reference;
	typedef typename Allocator::size_type         size_type;
	typedef typename Allocator::difference_type   difference_type;
	typedef typename Allocator::pointer           pointer;
	typedef typename Allocator::const_pointer     const_pointer;

private:

	typedef __tree<value_type, value_compare, allocator_type> tree_type;
public:

	typedef typename tree_type::const_iterator iterator;
	typedef typename tree_type::const_iterator const_iterator;
	typedef _STD::reverse_iterator<iterator>       reverse_iterator;
	typedef _STD::reverse_iterator<const_iterator> const_reverse_iterator;

	struct debug_view
	{
		debug_view* left_;
		debug_view* right_;
		debug_view* parent_;
		value_type data_;
	};

	//  construct/copy/destroy:
	         set();
	explicit set(const Compare& comp);
	         set(const Compare& comp, const Allocator& a);
	#ifndef _MSL_NO_MEMBER_TEMPLATE
		template <class InputIterator>
			inline
			set(InputIterator first, InputIterator last)
				: tree_(first, last, false, value_compare(), allocator_type())
			{
			}
		template <class InputIterator>
			inline
			set(InputIterator first, InputIterator last, const Compare& comp)
				: tree_(first, last, false, comp, allocator_type())
			{
			}
		template <class InputIterator>
			inline
			set(InputIterator first, InputIterator last, const Compare& comp,
				const Allocator& a)
				: tree_(first, last, false, comp, a)
			{
			}
	#else
		set(const_iterator first, const_iterator last, const Compare& comp = Compare(),
			const Allocator& a = Allocator());
		set(const value_type* first, const value_type* last, const Compare& comp = Compare(),
			const Allocator& a = Allocator());
	#endif
	allocator_type get_allocator() const;

	//  iterators:
	iterator               begin();
	const_iterator         begin() const;
	iterator               end();
	const_iterator         end() const;
	reverse_iterator       rbegin();
	const_reverse_iterator rbegin() const;
	reverse_iterator       rend();
	const_reverse_iterator rend() const;

	//  capacity:
	bool          empty() const;
	size_type     size() const;
	size_type     max_size() const;

	//  modifiers:
	pair<iterator,bool> insert(const value_type& x);
	iterator            insert(iterator position, const value_type& x);
	#ifndef _MSL_NO_MEMBER_TEMPLATE
		template <class InputIterator>
			inline
			void insert(InputIterator first, InputIterator last)
			{
				tree_.insert_one(first, last);
			}
	#else
		void insert(const_iterator first, const_iterator last);
		void insert(const value_type* first, const value_type* last);
	#endif

	void      erase(iterator position);
	size_type erase(const key_type& x);
	void      erase(iterator first, iterator last);
	void swap(set<Key,Compare,Allocator>& x);
	void clear();

	//  observers:
	key_compare   key_comp() const;
	value_compare value_comp() const;

	//  set operations:
	iterator       find(const key_type& x);
	const_iterator find(const key_type& x) const;

	size_type count(const key_type& x) const;

	iterator       lower_bound(const key_type& x);
	const_iterator lower_bound(const key_type& x) const;

	iterator       upper_bound(const key_type& x);
	const_iterator upper_bound(const key_type& x) const;

	pair<iterator, iterator>             equal_range(const key_type& x);
	pair<const_iterator, const_iterator> equal_range(const key_type& x) const;

	bool invariants() const;
private:
	tree_type tree_;
};

template <class Key, class Compare, class Allocator>
bool
operator==(const set<Key,Compare,Allocator>& x, const set<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator< (const set<Key,Compare,Allocator>& x, const set<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator!=(const set<Key,Compare,Allocator>& x, const set<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator> (const set<Key,Compare,Allocator>& x, const set<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator>=(const set<Key,Compare,Allocator>& x, const set<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator<=(const set<Key,Compare,Allocator>& x, const set<Key,Compare,Allocator>& y);

//  specialized algorithms:
template <class Key, class Compare, class Allocator>
void
swap(set<Key,Compare,Allocator>& x, set<Key,Compare,Allocator>& y);

// multiset

template <class Key, class Compare = less<Key>, class Allocator = allocator<Key> >
class multiset
{
public:
	//  types:
	typedef Key                                   key_type;
	typedef Key                                   value_type;
	typedef Compare                               key_compare;
	typedef Compare                               value_compare;
	typedef Allocator                             allocator_type;
	typedef typename Allocator::reference         reference;
	typedef typename Allocator::const_reference   const_reference;
	typedef typename Allocator::size_type         size_type;
	typedef typename Allocator::difference_type   difference_type;
	typedef typename Allocator::pointer           pointer;
	typedef typename Allocator::const_pointer     const_pointer;

private:

	typedef __tree<value_type, value_compare, allocator_type> tree_type;
public:

	typedef typename tree_type::const_iterator iterator;
	typedef typename tree_type::const_iterator const_iterator;
	typedef _STD::reverse_iterator<iterator>       reverse_iterator;
	typedef _STD::reverse_iterator<const_iterator> const_reverse_iterator;

	struct debug_view
	{
		debug_view* left_;
		debug_view* right_;
		debug_view* parent_;
		value_type data_;
	};

	//  construct/copy/destroy:
	         multiset();
	explicit multiset(const Compare& comp);
	         multiset(const Compare& comp, const Allocator& a);
	#ifndef _MSL_NO_MEMBER_TEMPLATE
		template <class InputIterator>
			inline
			multiset(InputIterator first, InputIterator last)
				: tree_(first, last, true, value_compare(), allocator_type())
			{
			}
		template <class InputIterator>
			inline
			multiset(InputIterator first, InputIterator last, const Compare& comp)
				: tree_(first, last, true, comp, allocator_type())
			{
			}
		template <class InputIterator>
			inline
			multiset(InputIterator first, InputIterator last, const Compare& comp,
				const Allocator& a)
				: tree_(first, last, true, comp, a)
			{
			}
	#else
		multiset(const_iterator first, const_iterator last, const Compare& comp = Compare(),
			const Allocator& a = Allocator());
		multiset(const value_type* first, const value_type* last, const Compare& comp = Compare(),
			const Allocator& a = Allocator());
	#endif
	allocator_type get_allocator() const;

	//  iterators:
	iterator               begin();
	const_iterator         begin() const;
	iterator               end();
	const_iterator         end() const;
	reverse_iterator       rbegin();
	const_reverse_iterator rbegin() const;
	reverse_iterator       rend();
	const_reverse_iterator rend() const;

	//  capacity:
	bool          empty() const;
	size_type     size() const;
	size_type     max_size() const;

	//  modifiers:
	iterator insert(const value_type& x);
	iterator insert(iterator position, const value_type& x);
	#ifndef _MSL_NO_MEMBER_TEMPLATE
		template <class InputIterator>
			inline
			void insert(InputIterator first, InputIterator last)
			{
				tree_.insert_multi(first, last);
			}
	#else
		void insert(const_iterator first, const_iterator last);
		void insert(const value_type* first, const value_type* last);
	#endif

	void      erase(iterator position);
	size_type erase(const key_type& x);
	void      erase(iterator first, iterator last);
	void swap(multiset<Key,Compare,Allocator>& x);
	void clear();

	//  observers:
	key_compare   key_comp() const;
	value_compare value_comp() const;

	//  set operations:
	iterator       find(const key_type& x);
	const_iterator find(const key_type& x) const;

	size_type count(const key_type& x) const;

	iterator       lower_bound(const key_type& x);
	const_iterator lower_bound(const key_type& x) const;

	iterator       upper_bound(const key_type& x);
	const_iterator upper_bound(const key_type& x) const;

	pair<iterator,iterator>              equal_range(const key_type& x);
	pair<const_iterator, const_iterator> equal_range(const key_type& x) const;

	bool invariants() const;
private:
	tree_type tree_;
};

template <class Key, class Compare, class Allocator>
bool
operator==(const multiset<Key,Compare,Allocator>& x, const multiset<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator< (const multiset<Key,Compare,Allocator>& x, const multiset<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator!=(const multiset<Key,Compare,Allocator>& x, const multiset<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator> (const multiset<Key,Compare,Allocator>& x, const multiset<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator>=(const multiset<Key,Compare,Allocator>& x, const multiset<Key,Compare,Allocator>& y);

template <class Key, class Compare, class Allocator>
bool
operator<=(const multiset<Key,Compare,Allocator>& x, const multiset<Key,Compare,Allocator>& y);

//  specialized algorithms:
template <class Key, class Compare, class Allocator>
void
swap(multiset<Key,Compare,Allocator>& x, multiset<Key,Compare,Allocator>& y);

// set implementation

template <class Key, class Compare, class Allocator>
inline
set<Key, Compare, Allocator>::set()
	: tree_(value_compare(), allocator_type())
{
}

template <class Key, class Compare, class Allocator>
inline
set<Key, Compare, Allocator>::set(const Compare& comp)
	: tree_(comp, allocator_type())
{
}

template <class Key, class Compare, class Allocator>
inline
set<Key, Compare, Allocator>::set(const Compare& comp, const Allocator& a)
	: tree_(comp, a)
{
}

#ifdef _MSL_NO_MEMBER_TEMPLATE

	template <class Key, class Compare, class Allocator>
	inline
	set<Key, Compare, Allocator>::set(const_iterator first, const_iterator last,
		const Compare& comp, const Allocator& a)
		: tree_(first, last, false, comp, a)
	{
	}

	template <class Key, class Compare, class Allocator>
	inline
	set<Key, Compare, Allocator>::set(const value_type* first, const value_type* last,
		const Compare& comp, const Allocator& a)
		: tree_(first, last, false, comp, a)
	{
	}

#endif

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::allocator_type
set<Key, Compare, Allocator>::get_allocator() const
{
	return tree_.get_allocator();
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::iterator
set<Key, Compare, Allocator>::begin()
{
	return tree_.begin();
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::const_iterator
set<Key, Compare, Allocator>::begin() const
{
	return tree_.begin();
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::iterator
set<Key, Compare, Allocator>::end()
{
	return tree_.end();
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::const_iterator
set<Key, Compare, Allocator>::end() const
{
	return tree_.end();
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::reverse_iterator
set<Key, Compare, Allocator>::rbegin()
{
	return reverse_iterator(end());
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::const_reverse_iterator
set<Key, Compare, Allocator>::rbegin() const
{
	return const_reverse_iterator(end());
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::reverse_iterator
set<Key, Compare, Allocator>::rend()
{
	return reverse_iterator(begin());
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::const_reverse_iterator
set<Key, Compare, Allocator>::rend() const
{
	return const_reverse_iterator(begin());
}

template <class Key, class Compare, class Allocator>
inline
bool
set<Key, Compare, Allocator>::empty() const
{
	return tree_.empty();
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::size_type
set<Key, Compare, Allocator>::size() const
{
	return tree_.size();
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::size_type
set<Key, Compare, Allocator>::max_size() const
{
	return tree_.max_size();
}

template <class Key, class Compare, class Allocator>
inline
pair<typename set<Key, Compare, Allocator>::iterator, bool>
set<Key, Compare, Allocator>::insert(const value_type& x)
{
	pair<typename tree_type::iterator, bool> result = tree_.insert_one(x);
	return pair<iterator, bool>(result.first, result.second);
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::iterator
set<Key, Compare, Allocator>::insert(iterator position, const value_type& x)
{
	return tree_.insert_one(position, x);
}

#ifdef _MSL_NO_MEMBER_TEMPLATE

	template <class Key, class Compare, class Allocator>
	inline
	void
	set<Key, Compare, Allocator>::insert(const_iterator first, const_iterator last)
	{
		tree_.insert_one(first, last);
	}

	template <class Key, class Compare, class Allocator>
	inline
	void
	set<Key, Compare, Allocator>::insert(const value_type* first, const value_type* last)
	{
		tree_.insert_one(first, last);
	}

#endif

template <class Key, class Compare, class Allocator>
inline
void
set<Key, Compare, Allocator>::erase(iterator position)
{
	tree_.erase(position);
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::size_type
set<Key, Compare, Allocator>::erase(const key_type& x)
{
	return tree_.erase_one(x);
}

template <class Key, class Compare, class Allocator>
inline
void
set<Key, Compare, Allocator>::erase(iterator first, iterator last)
{
	tree_.erase(first, last);
}

template <class Key, class Compare, class Allocator>
inline
void
set<Key, Compare, Allocator>::swap(set<Key,Compare,Allocator>& x)
{
	tree_.swap(x.tree_);
}

template <class Key, class Compare, class Allocator>
inline
void
set<Key, Compare, Allocator>::clear()
{
	tree_.clear();
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::key_compare
set<Key, Compare, Allocator>::key_comp() const
{
	return tree_.value_comp();
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::value_compare
set<Key, Compare, Allocator>::value_comp() const
{
	return tree_.value_comp();
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::iterator
set<Key, Compare, Allocator>::find(const key_type& x)
{
	return tree_.find(x);
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::const_iterator
set<Key, Compare, Allocator>::find(const key_type& x) const
{
	return tree_.find(x);
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::size_type
set<Key, Compare, Allocator>::count(const key_type& x) const
{
	return tree_.count_one(x);
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::iterator
set<Key, Compare, Allocator>::lower_bound(const key_type& x)
{
	return tree_.lower_bound(x);
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::const_iterator
set<Key, Compare, Allocator>::lower_bound(const key_type& x) const
{
	return tree_.lower_bound(x);
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::iterator
set<Key, Compare, Allocator>::upper_bound(const key_type& x)
{
	return tree_.upper_bound(x);
}

template <class Key, class Compare, class Allocator>
inline
typename set<Key, Compare, Allocator>::const_iterator
set<Key, Compare, Allocator>::upper_bound(const key_type& x) const
{
	return tree_.upper_bound(x);
}

template <class Key, class Compare, class Allocator>
inline
pair<typename set<Key, Compare, Allocator>::iterator, typename set<Key, Compare, Allocator>::iterator>
set<Key, Compare, Allocator>::equal_range(const key_type& x)
{
	pair<typename tree_type::iterator, typename tree_type::iterator> result = tree_.equal_range(x);
	return pair<iterator, iterator>(result.first, result.second);
}

template <class Key, class Compare, class Allocator>
inline
pair<typename set<Key, Compare, Allocator>::const_iterator, typename set<Key, Compare, Allocator>::const_iterator>
set<Key, Compare, Allocator>::equal_range(const key_type& x) const
{
	pair<typename tree_type::const_iterator, typename tree_type::const_iterator> result = tree_.equal_range(x);
	return pair<const_iterator, const_iterator>(result.first, result.second);
}

template <class Key, class Compare, class Allocator>
bool
set<Key, Compare, Allocator>::invariants() const
{
	if (size() >= 2)
	{
		const_iterator p = begin();
		const_iterator i = p;
		value_compare c = value_comp();
		for (++i; i != end(); ++p, ++i)
		{
			if (!c(*p, *i))
				return false;
		} 
	}
	return tree_.invariants();
}

template <class Key, class Compare, class Allocator>
inline
bool
operator==(const set<Key, Compare, Allocator>& x, const set<Key, Compare, Allocator>& y)
{
	return x.size() == y.size() && equal(x.begin(), x.end(), y.begin());
}

template <class Key, class Compare, class Allocator>
inline
bool
operator!=(const set<Key, Compare, Allocator>& x, const set<Key, Compare, Allocator>& y)
{
	return !(x == y);
}

template <class Key, class Compare, class Allocator>
inline
bool
operator< (const set<Key, Compare, Allocator>& x, const set<Key, Compare, Allocator>& y)
{
	return lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
}

template <class Key, class Compare, class Allocator>
inline
bool
operator> (const set<Key, Compare, Allocator>& x, const set<Key, Compare, Allocator>& y)
{
	return y < x;
}

template <class Key, class Compare, class Allocator>
inline
bool
operator>=(const set<Key, Compare, Allocator>& x, const set<Key, Compare, Allocator>& y)
{
	return !(x < y);
}

template <class Key, class Compare, class Allocator>
inline
bool
operator<=(const set<Key, Compare, Allocator>& x, const set<Key, Compare, Allocator>& y)
{
	return !(y < x);
}

template <class Key, class Compare, class Allocator>
inline
void
swap(set<Key, Compare, Allocator>& x, set<Key, Compare, Allocator>& y)
{
	x.swap(y);
}

// multiset implementation

template <class Key, class Compare, class Allocator>
inline
multiset<Key, Compare, Allocator>::multiset()
	: tree_(value_compare(), allocator_type())
{
}

template <class Key, class Compare, class Allocator>
inline
multiset<Key, Compare, Allocator>::multiset(const Compare& comp)
	: tree_(comp, allocator_type())
{
}

template <class Key, class Compare, class Allocator>
inline
multiset<Key, Compare, Allocator>::multiset(const Compare& comp, const Allocator& a)
	: tree_(comp, a)
{
}

#ifdef _MSL_NO_MEMBER_TEMPLATE

	template <class Key, class Compare, class Allocator>
	inline
	multiset<Key, Compare, Allocator>::multiset(const_iterator first, const_iterator last,
		const Compare& comp, const Allocator& a)
		: tree_(first, last, true, comp, a)
	{
	}

	template <class Key, class Compare, class Allocator>
	inline
	multiset<Key, Compare, Allocator>::multiset(const value_type* first, const value_type* last,
		const Compare& comp, const Allocator& a)
		: tree_(first, last, true, comp, a)
	{
	}

#endif

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::allocator_type
multiset<Key, Compare, Allocator>::get_allocator() const
{
	return tree_.get_allocator();
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::iterator
multiset<Key, Compare, Allocator>::begin()
{
	return tree_.begin();
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::const_iterator
multiset<Key, Compare, Allocator>::begin() const
{
	return tree_.begin();
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::iterator
multiset<Key, Compare, Allocator>::end()
{
	return tree_.end();
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::const_iterator
multiset<Key, Compare, Allocator>::end() const
{
	return tree_.end();
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::reverse_iterator
multiset<Key, Compare, Allocator>::rbegin()
{
	return reverse_iterator(end());
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::const_reverse_iterator
multiset<Key, Compare, Allocator>::rbegin() const
{
	return const_reverse_iterator(end());
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::reverse_iterator
multiset<Key, Compare, Allocator>::rend()
{
	return reverse_iterator(begin());
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::const_reverse_iterator
multiset<Key, Compare, Allocator>::rend() const
{
	return const_reverse_iterator(begin());
}

template <class Key, class Compare, class Allocator>
inline
bool
multiset<Key, Compare, Allocator>::empty() const
{
	return tree_.empty();
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::size_type
multiset<Key, Compare, Allocator>::size() const
{
	return tree_.size();
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::size_type
multiset<Key, Compare, Allocator>::max_size() const
{
	return tree_.max_size();
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::iterator
multiset<Key, Compare, Allocator>::insert(const value_type& x)
{
	return tree_.insert_multi(x);
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::iterator
multiset<Key, Compare, Allocator>::insert(iterator position, const value_type& x)
{
	return tree_.insert_multi(position, x);
}

#ifdef _MSL_NO_MEMBER_TEMPLATE

	template <class Key, class Compare, class Allocator>
	inline
	void
	multiset<Key, Compare, Allocator>::insert(const_iterator first, const_iterator last)
	{
		tree_.insert_multi(first, last);
	}

	template <class Key, class Compare, class Allocator>
	inline
	void
	multiset<Key, Compare, Allocator>::insert(const value_type* first, const value_type* last)
	{
		tree_.insert_multi(first, last);
	}

#endif

template <class Key, class Compare, class Allocator>
inline
void
multiset<Key, Compare, Allocator>::erase(iterator position)
{
	tree_.erase(position);
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::size_type
multiset<Key, Compare, Allocator>::erase(const key_type& x)
{
	return tree_.erase_multi(x);
}

template <class Key, class Compare, class Allocator>
inline
void
multiset<Key, Compare, Allocator>::erase(iterator first, iterator last)
{
	tree_.erase(first, last);
}

template <class Key, class Compare, class Allocator>
inline
void
multiset<Key, Compare, Allocator>::swap(multiset<Key,Compare,Allocator>& x)
{
	tree_.swap(x.tree_);
}

template <class Key, class Compare, class Allocator>
inline
void
multiset<Key, Compare, Allocator>::clear()
{
	tree_.clear();
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::key_compare
multiset<Key, Compare, Allocator>::key_comp() const
{
	return tree_.value_comp();
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::value_compare
multiset<Key, Compare, Allocator>::value_comp() const
{
	return tree_.value_comp();
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::iterator
multiset<Key, Compare, Allocator>::find(const key_type& x)
{
	return tree_.find(x);
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::const_iterator
multiset<Key, Compare, Allocator>::find(const key_type& x) const
{
	return tree_.find(x);
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::size_type
multiset<Key, Compare, Allocator>::count(const key_type& x) const
{
	return tree_.count_multi(x);
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::iterator
multiset<Key, Compare, Allocator>::lower_bound(const key_type& x)
{
	return tree_.lower_bound(x);
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::const_iterator
multiset<Key, Compare, Allocator>::lower_bound(const key_type& x) const
{
	return tree_.lower_bound(x);
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::iterator
multiset<Key, Compare, Allocator>::upper_bound(const key_type& x)
{
	return tree_.upper_bound(x);
}

template <class Key, class Compare, class Allocator>
inline
typename multiset<Key, Compare, Allocator>::const_iterator
multiset<Key, Compare, Allocator>::upper_bound(const key_type& x) const
{
	return tree_.upper_bound(x);
}

template <class Key, class Compare, class Allocator>
inline
pair<typename multiset<Key, Compare, Allocator>::iterator, typename multiset<Key, Compare, Allocator>::iterator>
multiset<Key, Compare, Allocator>::equal_range(const key_type& x)
{
	pair<typename tree_type::iterator, typename tree_type::iterator> result = tree_.equal_range(x);
	return pair<iterator, iterator>(result.first, result.second);
}

template <class Key, class Compare, class Allocator>
inline
pair<typename multiset<Key, Compare, Allocator>::const_iterator, typename multiset<Key, Compare, Allocator>::const_iterator>
multiset<Key, Compare, Allocator>::equal_range(const key_type& x) const
{
	pair<typename tree_type::const_iterator, typename tree_type::const_iterator> result = tree_.equal_range(x);
	return pair<const_iterator, const_iterator>(result.first, result.second);
}

template <class Key, class Compare, class Allocator>
bool
multiset<Key, Compare, Allocator>::invariants() const
{
	if (size() >= 2)
	{
		const_iterator p = begin();
		const_iterator i = p;
		value_compare c = value_comp();
		for (++i; i != end(); ++p, ++i)
		{
			if (c(*i, *p))
				return false;
		} 
	}
	return tree_.invariants();
}

template <class Key, class Compare, class Allocator>
inline
bool
operator==(const multiset<Key, Compare, Allocator>& x, const multiset<Key, Compare, Allocator>& y)
{
	return x.size() == y.size() && equal(x.begin(), x.end(), y.begin());
}

template <class Key, class Compare, class Allocator>
inline
bool
operator!=(const multiset<Key, Compare, Allocator>& x, const multiset<Key, Compare, Allocator>& y)
{
	return !(x == y);
}

template <class Key, class Compare, class Allocator>
inline
bool
operator< (const multiset<Key, Compare, Allocator>& x, const multiset<Key, Compare, Allocator>& y)
{
	return lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
}

template <class Key, class Compare, class Allocator>
inline
bool
operator> (const multiset<Key, Compare, Allocator>& x, const multiset<Key, Compare, Allocator>& y)
{
	return y < x;
}

template <class Key, class Compare, class Allocator>
inline
bool
operator>=(const multiset<Key, Compare, Allocator>& x, const multiset<Key, Compare, Allocator>& y)
{
	return !(x < y);
}

template <class Key, class Compare, class Allocator>
inline
bool
operator<=(const multiset<Key, Compare, Allocator>& x, const multiset<Key, Compare, Allocator>& y)
{
	return !(y < x);
}

template <class Key, class Compare, class Allocator>
inline
void
swap(multiset<Key, Compare, Allocator>& x, multiset<Key, Compare, Allocator>& y)
{
	x.swap(y);
}

#ifndef _MSL_NO_CPP_NAMESPACE
	} // namespace std
#endif

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
	#pragma enumsalwaysint reset
#endif

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
	#pragma bool reset
#endif

#pragma options align=reset

#endif // RC_INVOKED

#endif // _SET

// hh 971220 fixed MOD_INCLUDE
// hh 971223 Changed filename from set.h to set
// hh 971223 Made include guards standard
// hh 971223 added alignment wrapper
// hh 971230 added RC_INVOKED wrapper
// DWA 980305 changed iterator to const_iterator in multiset constructor, hh 980311 checked
// hh 981130 Rewrote
// hh 991120 Added wrapper around compare function so that empty member optimization can still
//           be used in case it is a function pointer.
// hh 000130 Renamed from tree.h to tree
// hh 000130 Got rid of default arguments involving references
// hh 010402 Removed 68K CMF support
// hh 010404 Removed wrapper around compare function.  The function pointer case is now taken
//           care of inside of __tree.
// hh 010508 Added overloads for find, lower_bound, upper_bound, equal_range (issue 214)
