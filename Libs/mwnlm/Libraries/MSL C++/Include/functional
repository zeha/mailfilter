/* Metrowerks Standard Library
 * Copyright © 1995-2002 Metrowerks Corporation.  All rights reserved.
 *
 * $Date: 2002/07/01 21:13:32 $ 
 * $Revision: 1.3 $ 
 */

// functional

#ifndef _FUNCTIONAL
#define _FUNCTIONAL

/*  functional synopsis

namespace std
{

//  lib.base, base:

template <class Arg, class Result>              struct unary_function;
template <class Arg1, class Arg2, class Result> struct binary_function;

//  lib.arithmetic.operations, arithmetic operations:

template <class T> struct plus;
template <class T> struct minus;
template <class T> struct multiplies;
template <class T> struct divides;
template <class T> struct modulus;
template <class T> struct negate;

//  lib.comparisons, comparisons:

template <class T> struct equal_to;
template <class T> struct not_equal_to;
template <class T> struct greater;
template <class T> struct less;
template <class T> struct greater_equal;
template <class T> struct less_equal;

//  lib.logical.operations, logical operations:

template <class T> struct logical_and;
template <class T> struct logical_or;
template <class T> struct logical_not;

//  lib.negators, negators:

template <class Predicate> struct unary_negate;
template <class Predicate> unary_negate<Predicate>  not1(const Predicate&);
template <class Predicate> struct binary_negate;
template <class Predicate> binary_negate<Predicate> not2(const Predicate&);

//  lib.binders, binders:

template <class Operation>  class binder1st;
template <class Operation, class T> binder1st<Operation> bind1st(const Operation&, const T&);
template <class Operation> class binder2nd;
template <class Operation, class T> binder2nd<Operation> bind2nd(const Operation&, const T&);

//  lib.function.pointer.adaptors, adaptors:

template <class Arg, class Result> class pointer_to_unary_function;

template <class Arg, class Result>
pointer_to_unary_function<Arg,Result>
ptr_fun(Result (*)(Arg));

template <class Arg1, class Arg2, class Result> class pointer_to_binary_function;

template <class Arg1, class Arg2, class Result>
pointer_to_binary_function<Arg1,Arg2,Result>
ptr_fun(Result (*)(Arg1,Arg2));

//  lib.member.pointer.adaptors, adaptors:

template<class S, class T>          class mem_fun_t;
template<class S, class T, class A> class mem_fun1_t;

template<class S, class T>
mem_fun_t<S,T>
mem_fun(S (T::*f)());

template<class S, class T, class A>
mem_fun1_t<S,T,A>
mem_fun(S (T::*f)(A));

template<class S, class T>          class mem_fun_ref_t;
template<class S, class T, class A> class mem_fun1_ref_t;

template<class S, class T>
mem_fun_ref_t<S,T>
mem_fun_ref(S (T::*f)());

template<class S, class T, class A>
mem_fun1_ref_t<S,T,A>
mem_fun_ref(S (T::*f)(A));

template <class S, class T>          class const_mem_fun_t;
template <class S, class T, class A> class const_mem_fun1_t;

template <class S, class T>
const_mem_fun_t<S,T>
mem_fun(S (T::*f)() const);

template <class S, class T, class A>
const_mem_fun1_t<S,T,A>
mem_fun(S (T::*f)(A) const);

template <class S, class T>          class const_mem_fun_ref_t;
template <class S, class T, class A> class const_mem_fun1_ref_t;

template <class S, class T>
const_mem_fun_ref_t<S,T>
mem_fun_ref(S (T::*f)() const);

template <class S, class T, class A>
const_mem_fun1_ref_t<S,T,A>
mem_fun_ref(S (T::*f)(A) const);

}  // std
*/

#include <mslconfig>

#ifdef _MSL_EXTENDED_BINDERS

#include <msl_utility>

#endif

#ifndef RC_INVOKED

#pragma options align=native

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
	#if _MSL_FORCE_ENUMS_ALWAYS_INT
		#pragma enumsalwaysint on
	#else
		#pragma enumsalwaysint off
	#endif
#endif

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
	#if _MSL_FORCE_ENABLE_BOOL_SUPPORT
		#pragma bool on
	#else
		#pragma bool off
	#endif
#endif

#ifndef _MSL_NO_CPP_NAMESPACE
	namespace std {
#endif

//  lib.base, base:

template <class Arg, class Result>
struct unary_function
{
	typedef Arg    argument_type;
	typedef Result result_type;
};

template <class Arg1, class Arg2, class Result>
struct binary_function
{
	typedef Arg1   first_argument_type;
	typedef Arg2   second_argument_type;
	typedef Result result_type;
};

//  lib.arithmetic.operations, arithmetic operations:

// plus

template <class T>
struct plus
	: binary_function<T, T, T>
{
	T operator()(const T& x, const T& y) const {return x + y;}
};

// minus

template <class T>
struct minus
	: binary_function<T, T, T>
{
	T operator()(const T& x, const T& y) const {return x - y;}
};

// multiplies

template <class T>
struct multiplies
	: binary_function<T, T, T>
{
	T operator()(const T& x, const T& y) const {return x * y;}
};

// divides

template <class T>
struct divides
	: binary_function<T, T, T>
{
	T operator()(const T& x, const T& y) const {return x / y;}
};

// modulus

template <class T>
struct modulus
	: binary_function<T, T, T>
{
	T operator()(const T& x, const T& y) const {return x % y;}
};

// negate

template <class T>
struct negate
	: unary_function<T, T>
{
	T operator()(const T& x) const {return -x;}
};

//  lib.comparisons, comparisons:

// equal_to

template <class T>
struct equal_to
	: binary_function<T, T, bool>
{
	bool operator()(const T& x, const T& y) const {return static_cast<bool>(x == y);}
};

// not_equal_to

template <class T>
struct not_equal_to
	: binary_function<T, T, bool>
{
	bool operator()(const T& x, const T& y) const {return static_cast<bool>(!(x == y));}
};

// greater

template <class T>
struct greater
	: binary_function<T, T, bool>
{
	bool operator()(const T& x, const T& y) const {return static_cast<bool>(y < x);}
};

// less

template <class T>
struct less
	: binary_function<T, T, bool>
{
	bool operator()(const T& x, const T& y) const {return static_cast<bool>(x < y);}
};

// greater_equal

template <class T>
struct greater_equal
	: binary_function<T, T, bool>
{
	bool operator()(const T& x, const T& y) const {return static_cast<bool>(!(x < y));}
};

// less_equal

template <class T>
struct less_equal
	: binary_function<T, T, bool>
{
	bool operator()(const T& x, const T& y) const {return static_cast<bool>(!(y < x));}
};

//  lib.logical.operations, logical operations:

// logical_and

template <class T>
struct logical_and
	: binary_function<T, T, bool>
{
	bool operator()(const T& x, const T& y) const {return static_cast<bool>(x && y);}
};

// logical_or

template <class T>
struct logical_or
	: binary_function<T, T, bool>
{
	bool operator()(const T& x, const T& y) const {return static_cast<bool>(x || y);}
};

// logical_not

template <class T>
struct logical_not
	: unary_function<T, bool>
{
	bool operator()(const T& x) const {return static_cast<bool>(!x);}
};

//  lib.negators, negators:

// unary_negate

template <class Predicate>
class unary_negate
	: public unary_function<typename Predicate::argument_type, bool>
{
public:
	explicit unary_negate(const Predicate& pred) : pred_(pred) {}
	bool operator()(const typename Predicate::argument_type& x) const
		{return static_cast<bool>(!pred_(x));}
private:
	Predicate pred_;
};

template <class Predicate>
inline
unary_negate<Predicate>
not1(const Predicate& pred)
{
	return unary_negate<Predicate>(pred);
}

// binary_negate

template <class Predicate>
class binary_negate
	: public binary_function<typename Predicate::first_argument_type,
	                         typename Predicate::second_argument_type, bool>
{
public:
	explicit binary_negate(const Predicate& pred) : pred_(pred) {}
	bool operator()(const typename Predicate::first_argument_type&  x,
	                const typename Predicate::second_argument_type& y) const
		{return static_cast<bool>(!pred_(x, y));}
private:
	Predicate pred_;
};

template <class Predicate>
inline
binary_negate<Predicate>
not2(const Predicate& pred)
{
	return binary_negate<Predicate>(pred);
}

template <class T>
struct __unary_true_value
	: unary_function<T, bool>
{
	bool operator()(const T&) const {return true;}
};

//  lib.binders, binders:

// binder1st

#ifdef _MSL_EXTENDED_BINDERS

template <class Operation, class T = typename Metrowerks::remove_reference<Operation>::type::first_argument_type>
class binder1st
	: public unary_function<typename Metrowerks::remove_reference<Operation>::type::second_argument_type,
	                        typename Metrowerks::remove_reference<Operation>::type::result_type>
{
	typedef typename unary_function<
		typename Metrowerks::remove_reference<Operation>::type::second_argument_type,
		typename Metrowerks::remove_reference<Operation>::type::result_type> base;
public:
	typedef Operation operation_type;
	typedef T first_argument_type;
	typedef typename base::argument_type argument_type;
	typedef typename base::result_type result_type;

	binder1st(typename Metrowerks::call_traits<Operation>::param_type x,
	          typename Metrowerks::call_traits<T>::param_type y)
		: op(x), value(y) {}
	result_type
		operator()(typename Metrowerks::call_traits<argument_type>::const_reference x) const
		{return op(value, x);}
	result_type
		operator()(typename Metrowerks::call_traits<argument_type>::reference x)
		{return op(value, x);}
protected:
	operation_type op;
	first_argument_type value;
};

#else  // _MSL_EXTENDED_BINDERS

template <class Operation>
class binder1st
	: public unary_function<typename Operation::second_argument_type,
	                        typename Operation::result_type>
{
public:
	binder1st(const Operation& x, const typename Operation::first_argument_type& y)
		: op(x), value(y) {}
	typename Operation::result_type
		operator()(const typename Operation::second_argument_type& x) const {return op(value, x);}
	typename Operation::result_type  // experimental
		operator()(typename Operation::second_argument_type& x) const {return op(value, x);}
protected:
	Operation op;
	typename Operation::first_argument_type value;
};

#endif  // _MSL_EXTENDED_BINDERS

template <class Operation, class T>
inline
binder1st<Operation>
bind1st(const Operation& op, const T& x)
{
	return binder1st<Operation>(op, typename Operation::first_argument_type(x));
}

// __binder1st_const_ref

template <class Operation>
class __binder1st_const_ref
	: public unary_function<typename Operation::second_argument_type,
	                        typename Operation::result_type>
{
public:
	__binder1st_const_ref(const Operation& x, const typename Operation::first_argument_type& y);
	typename Operation::result_type
		operator()(const typename Operation::second_argument_type& x) const;
protected:
	Operation op;
	const typename Operation::first_argument_type* value;
};

template <class Operation>
inline
__binder1st_const_ref<Operation>::__binder1st_const_ref(const Operation& x,
                                const typename Operation::first_argument_type& y)
	: op(x),
	  value(&y)
{
}

template <class Operation>
inline
typename Operation::result_type
__binder1st_const_ref<Operation>::operator()(const typename Operation::second_argument_type& x) const
{
	return op(*value, x);
}

// binder2nd

#ifdef _MSL_EXTENDED_BINDERS

template <class Operation, class T = typename Metrowerks::remove_reference<Operation>::type::second_argument_type>
class binder2nd
	: public unary_function<typename Metrowerks::remove_reference<Operation>::type::first_argument_type,
	                        typename Metrowerks::remove_reference<Operation>::type::result_type>
{
	typedef typename unary_function<
		typename Metrowerks::remove_reference<Operation>::type::first_argument_type,
		typename Metrowerks::remove_reference<Operation>::type::result_type> base;
public:
	typedef Operation operation_type;
	typedef T second_argument_type;
	typedef typename base::argument_type argument_type;
	typedef typename base::result_type result_type;

	binder2nd(typename Metrowerks::call_traits<Operation>::param_type x,
	          typename Metrowerks::call_traits<T>::param_type y)
		: op(x), value(y) {}
	result_type
		operator()(typename Metrowerks::call_traits<argument_type>::const_reference x) const
		{return op(x, value);}
	result_type
		operator()(typename Metrowerks::call_traits<argument_type>::reference x)
		{return op(x, value);}
protected:
	operation_type op;
	second_argument_type value;
};

#else // _MSL_EXTENDED_BINDERS

template <class Operation>
class binder2nd
	: public unary_function<typename Operation::first_argument_type,
	                        typename Operation::result_type>
{
public:
	binder2nd(const Operation& x, const typename Operation::second_argument_type& y)
		: op(x), value(y) {}
	typename Operation::result_type
		operator()(const typename Operation::first_argument_type& x) const
			{return op(x, value);}
	typename Operation::result_type  // experimental
		operator()(typename Operation::first_argument_type& x) const
			{return op(x, value);}
protected:
	Operation op;
	typename Operation::second_argument_type value;
};

#endif  // _MSL_EXTENDED_BINDERS

template <class Operation, class T>
inline
binder2nd<Operation>
bind2nd(const Operation& op, const T& x)
{
	return binder2nd<Operation>(op, typename Operation::second_argument_type(x));
}

// __binder2nd_const_ref

template <class Operation>
class __binder2nd_const_ref
	: public unary_function<typename Operation::first_argument_type,
	                        typename Operation::result_type>
{
public:
	__binder2nd_const_ref(const Operation& x, const typename Operation::second_argument_type& y);
	typename Operation::result_type
		operator()(const typename Operation::first_argument_type& x) const;
protected:
	Operation op;
	const typename Operation::second_argument_type* value;
};

template <class Operation>
inline
__binder2nd_const_ref<Operation>::__binder2nd_const_ref(const Operation& x,
                                const typename Operation::second_argument_type& y)
	: op(x),
	  value(&y)
{
}

template <class Operation>
inline
typename Operation::result_type
__binder2nd_const_ref<Operation>::operator()(const typename Operation::first_argument_type& x) const
{
	return op(x, *value);
}

//  lib.function.pointer.adaptors, adaptors:

// pointer_to_unary_function

template <class Arg, class Result>
class pointer_to_unary_function
	: public unary_function<Arg, Result>
{
public:
	explicit pointer_to_unary_function(Result (*f)(Arg)) : f_(f) {}
	Result operator()(Arg x) const {return f_(x);}
private:
	Result (*f_)(Arg);
};

template <class Arg, class Result>
inline
pointer_to_unary_function<Arg, Result>
ptr_fun(Result (*f)(Arg))
{
	return pointer_to_unary_function<Arg, Result>(f);
}

// pointer_to_binary_function

template <class Arg1, class Arg2, class Result>
class pointer_to_binary_function
	: public binary_function<Arg1, Arg2, Result>
{
public:
	explicit pointer_to_binary_function(Result (*f)(Arg1, Arg2)) : f_(f) {}
	Result operator()(Arg1 x, Arg2 y) const {return f_(x, y);}
private:
	Result (*f_)(Arg1, Arg2);
};

template <class Arg1, class Arg2, class Result>
inline
pointer_to_binary_function<Arg1, Arg2, Result>
ptr_fun(Result (*f)(Arg1, Arg2))
{
	return pointer_to_binary_function<Arg1, Arg2, Result>(f);
}

//  lib.member.pointer.adaptors, adaptors:

// mem_fun_t

template <class S, class T>
class mem_fun_t
	: public unary_function<T*, S>
{
public:
	explicit mem_fun_t(S (T::*mf)()) : mf_(mf) {}
	S operator()(T* p) const {return (p->*mf_)();}
private:
	S (T::*mf_)();
};

// mem_fun1_t

template <class S, class T, class A>
class mem_fun1_t
	: public binary_function<T*, A, S>
{
public:
	explicit mem_fun1_t(S (T::*mf)(A)) : mf_(mf) {}
	S operator()(T* p, A x) const {return (p->*mf_)(x);}
private:
	S (T::*mf_)(A);
};

// mem_fun

template<class S, class T>
inline
mem_fun_t<S, T>
mem_fun(S (T::*f)())
{
	return mem_fun_t<S, T>(f);
}

template<class S, class T, class A>
inline
mem_fun1_t<S, T, A>
mem_fun(S (T::*f)(A))
{
	return mem_fun1_t<S, T, A>(f);
}

// mem_fun_ref_t

template <class S, class T>
class mem_fun_ref_t
	: public unary_function<T, S>
{
public:
	explicit mem_fun_ref_t(S (T::*mf)()) : mf_(mf) {}
	S operator()(T& p) const {return (p.*mf_)();}
private:
	S (T::*mf_)();
};

// mem_fun1_ref_t

template <class S, class T, class A>
class mem_fun1_ref_t
	: public binary_function<T, A, S>
{
public:
	explicit mem_fun1_ref_t(S (T::*mf)(A)) : mf_(mf) {}
	S operator()(T& p, A x) const {return (p.*mf_)(x);}
private:
	S (T::*mf_)(A);
};

// mem_fun_ref

template<class S, class T>
inline
mem_fun_ref_t<S, T>
mem_fun_ref(S (T::*f)())
{
	return mem_fun_ref_t<S, T>(f);
}

template<class S, class T, class A>
inline
mem_fun1_ref_t<S, T, A>
mem_fun_ref(S (T::*f)(A))
{
	return mem_fun1_ref_t<S, T, A>(f);
}

// const_mem_fun_t

template <class S, class T>
class const_mem_fun_t
	: public unary_function<const T*, S>
{
public:
	explicit const_mem_fun_t(S (T::*mf)() const) : mf_(mf) {}
	S operator()(const T* p) const {return (p->*mf_)();}
private:
	S (T::*mf_)() const;
};

// const_mem_fun1_t

template <class S, class T, class A>
class const_mem_fun1_t
	: public binary_function<const T*, A, S>
{
public:
	explicit const_mem_fun1_t(S (T::*mf)(A) const) : mf_(mf) {}
	S operator()(const T* p, A x) const {return (p->*mf_)(x);}
private:
	S (T::*mf_)(A) const;
};

// mem_fun

template <class S, class T>
inline
const_mem_fun_t<S, T>
mem_fun(S (T::*f)() const)
{
	return const_mem_fun_t<S, T>(f);
}

template <class S, class T, class A>
inline
const_mem_fun1_t<S, T, A>
mem_fun(S (T::*f)(A) const)
{
	return const_mem_fun1_t<S, T, A>(f);
}

// const_mem_fun_ref_t

template <class S, class T>
class const_mem_fun_ref_t
	: public unary_function<T, S>
{
public:
	explicit const_mem_fun_ref_t(S (T::*mf)() const) : mf_(mf) {}
	S operator()(const T& p) const {return (p.*mf_)();}
private:
	S (T::*mf_)() const;
};

// const_mem_fun1_ref_t

template <class S, class T, class A>
class const_mem_fun1_ref_t
	: public binary_function<T, A, S>
{
public:
	explicit const_mem_fun1_ref_t(S (T::*mf)(A) const) : mf_(mf) {}
	S operator()(const T& p, A x) const {return (p.*mf_)(x);}
private:
	S (T::*mf_)(A) const;
};

// mem_fun_ref

template <class S, class T>
inline
const_mem_fun_ref_t<S, T>
mem_fun_ref(S (T::*f)() const)
{
	return const_mem_fun_ref_t<S, T>(f);
}

template <class S, class T, class A>
inline
const_mem_fun1_ref_t<S, T, A>
mem_fun_ref(S (T::*f)(A) const)
{
	return const_mem_fun1_ref_t<S, T, A>(f);
}

#ifndef _MSL_NO_CPP_NAMESPACE
	} // namespace std 
#endif

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
	#pragma enumsalwaysint reset
#endif

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
	#pragma bool reset
#endif

#pragma options align=reset

#endif // RC_INVOKED

#endif // _FUNCTIONAL

// hh 971221 Changed filename from functional.h to functional
// hh 971221 Made include guards standard
// hh 971230 added RC_INVOKED wrapper
// hh 980401 rewrote all mem_fun stuff
// hh 980731 added select2nd per customer request
// hh 980923 Put in a few typename fixes
// hh 990505 Rewrote
// hh 990807 Added pointer_to_binary_function_with_const_args
//           and pointer_to_unary_function_with_const_args.
// hh 991015 const_mem_fun1_ref_t was missing data member
// hh 991118 Added experimental operators to binder1st and binder2nd that take
//           non-const args.
// hh 000402 Extended functionality to binder1st and binder2nd.
// hh 010225 Changed relational and equality functionals to only use == and <
// hh 010402 Removed 68K CMF support
// hh 011018 Changed arg_type of const_mem_fun_t and const_mem_fun1_t from T* to const T*
// hh 011210 Removed pointer_to_binary_function_with_const_args
//           and pointer_to_unary_function_with_const_args.
