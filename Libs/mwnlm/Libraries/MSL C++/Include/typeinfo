/* Metrowerks Standard Library
 * Copyright © 1995-2002 Metrowerks Corporation.  All rights reserved.
 *
 * $Date: 2002/07/01 21:13:38 $ 
 * $Revision: 1.3 $ 
 */

// typeinfo

#ifndef _TYPEINFO
#define _TYPEINFO

/*  typeinfo synopsis

namespace std
{
class type_info
{
public:
	bool operator== (const type_info& rhs) const;
	bool operator!= (const type_info& rhs) const;
	bool before (const type_info& rhs) const;
	const char* name () const;

private:
	type_info (const type_info&);             //  not defined
	type_info& operator= (const type_info&);  //  not defined
};

class bad_cast : public exception {
public :
	bad_cast() throw();
	bad_cast(const bad_cast&) throw();
	bad_cast& operator=(const bad_cast&) throw();
	virtual ~bad_cast() throw();
	virtual const char* what() const throw();
};

class bad_typeid : public exception {
public:
	bad_typeid() throw();
	bad_typeid(const bad_typeid&) throw();
	bad_typeid& operator=(const bad_typeid&) throw();
	virtual ~bad_typeid() throw();
	virtual const char* what() const throw();
};

}  // std
*/

#include <mslconfig>
#include <exception> 	//960828 bkoz so that __priv_throwbadcast defined in runtime
#include <cstring>      // hh 980124 added

#ifndef RC_INVOKED // hh 971230

#pragma options align=native

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
	#if _MSL_FORCE_ENUMS_ALWAYS_INT
		#pragma enumsalwaysint on
	#else
		#pragma enumsalwaysint off
	#endif
#endif

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
	#if _MSL_FORCE_ENABLE_BOOL_SUPPORT
		#pragma bool on
	#else
		#pragma bool off
	#endif
#endif

#ifndef _MSL_NO_CPP_NAMESPACE      // hh 971206
	namespace std {
#endif

#if __MOTO__
#pragma define_type_info
#endif

#ifndef __GNUC__

class type_info
{
		const char	*tname;
		const void	*tbase;
	
	public:
		// hh 991008
		bool operator== (const type_info& rhs) const {return static_cast<bool>(strcmp(tname, rhs.tname) == 0);}
		bool operator!= (const type_info& rhs) const {return static_cast<bool>(strcmp(tname, rhs.tname) != 0);}
		bool before (const type_info& rhs) const {return static_cast<bool>(strcmp(tname, rhs.tname) < 0);}
		const char* name () const {return tname;}
	
	private:
		type_info (const type_info&);
		type_info& operator= (const type_info&);
};

#endif

class bad_cast : public exception {
public :
	bad_cast() _MSL_THROW {}
	bad_cast(const bad_cast&) _MSL_THROW {}
	bad_cast& operator=(const bad_cast&) _MSL_THROW {return *this;}
	virtual ~bad_cast() _MSL_THROW {}
	virtual const char* what() const _MSL_THROW {return "bad_cast";}
};

class bad_typeid : public exception {
public:
	bad_typeid() _MSL_THROW {}
	bad_typeid(const bad_typeid&) _MSL_THROW {}
	bad_typeid& operator=(const bad_typeid&) _MSL_THROW {return *this;}
	virtual ~bad_typeid() _MSL_THROW {}
	virtual const char* what() const _MSL_THROW {return "bad_typeid";}
};

#ifndef _MSL_NO_CPP_NAMESPACE      // hh 971206
	}
#endif

#ifdef _MSL_FORCE_ENUMS_ALWAYS_INT
	#pragma enumsalwaysint reset
#endif

#ifdef _MSL_FORCE_ENABLE_BOOL_SUPPORT
	#pragma bool reset
#endif

#pragma options align=reset

#endif // RC_INVOKED

#endif  // _TYPEINFO

// mm 960609a          Commented out to avoid duplicate declaration
// mm 960509b          Moved from mexcept.h
// bkoz960828          changes to move exception classes back into typeinfo
//981210 bkoz added alignment wrapper
//961221 bkoz	line 23 added moto pragme (mmoss)
//961229 bkoz removed bool_type and substituted bool
//970211 bkoz added defs for bad_cast ctors, bad_typeid dtor
// hh 971206  added namespace support
// hh 971209 changed to ! __INTEL__ for Be.  Was dest_os != win32
// hh 971227 upgradded bad_cast and bad_typeid
// hh 971230 added RC_INVOKED wrapper
// hh 990120 changed name of MSIPL flags
// hh 991008 removed virtual destructor
// hh 010402 Removed 68K CMF support
